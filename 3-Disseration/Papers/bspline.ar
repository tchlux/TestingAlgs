!<arch>
banfac.f        496939132   869   730   100755  5223      `
      SUBROUTINE BANFAC ( W, NROWW, NROW, NBANDL, NBANDU, IFLAG )
C  RETURNS IN  W  THE LU-FACTORIZATION (WITHOUT PIVOTING) OF THE BANDED
C  MATRIX  A  OR ORDER  NROW  WITH  (NBANDL + 1 + NBANDU) BANDS OR DIAG-
C  ONALS IN THE WORK ARRAY  W .
C
C******  I N P U T  ******
C  W.....WORK ARRAY OF SIZE  (NROWW,NROW)  CONTAINING THE INTERESTING
C        PART OF A BANDED MATRIX  A , WITH THE DIAGONALS OR BANDS OF  A
C        STORED IN THE ROWS OF  W , WHILE COLUMNS OF  A  CORRESPOND TO
C        COLUMNS OF  W . THIS IS THE STORAGE MODE USED IN  LINPACK  AND
C        RESULTS IN EFFICIENT INNERMOST LOOPS.
C           EXPLICITLY,  A  HAS  NBANDL  BANDS BELOW THE DIAGONAL
C                            +     1     (MAIN) DIAGONAL
C                            +   NBANDU  BANDS ABOVE THE DIAGONAL
C        AND THUS, WITH    MIDDLE = NBANDU + 1,
C          A(I+J,J)  IS IN  W(I+MIDDLE,J)  FOR I=-NBANDU,...,NBANDL
C                                              J=1,...,NROW .
C        FOR EXAMPLE, THE INTERESTING ENTRIES OF A (1,2)-BANDED MATRIX
C        OF ORDER  9  WOULD APPEAR IN THE FIRST  1+1+2 = 4  ROWS OF  W
C        AS FOLLOWS.
C                          13 24 35 46 57 68 79
C                       12 23 34 45 56 67 78 89
C                    11 22 33 44 55 66 77 88 99
C                    21 32 43 54 65 76 87 98
C
C        ALL OTHER ENTRIES OF  W  NOT IDENTIFIED IN THIS WAY WITH AN EN-
C        TRY OF  A  ARE NEVER REFERENCED .
C  NROWW.....ROW DINENSION OF THE WORK ARRAY  W .
C        MUST BE  .GE.  NBANDL + 1 + NBANDU  .
C  NBANDL.....NUMBER OF BANDS OF  A  BELOW THE MAIN DIAGONAL
C  NBANDU.....NUMBER OF BANDS OF  A  ABOVE THE MAIN DIAGONAL .
C
C******  O U T P U T  ******
C  IFLAG.....INTEGER INDICATING SUCCESS( = 1) OR FAILURE ( = 2) .
C     IF  IFLAG = 1, THEN
C  W.....CONTAINS THE LU-FACTORIZATION OF  A  INTO A UNIT LOWER TRIANGU-
C        LAR MATRIX  L  AND AN UPPER TRIANGULAR MATRIX  U (BOTH BANDED)
C        AND STORED IN CUSTOMARY FASHION OVER THE CORRESPONDING ENTRIES
C        OF  A . THIS MAKES IT POSSIBLE TO SOLVE ANY PARTICULAR LINEAR
C        SYSTEM  A*X = B  FOR  X  BY A
C              CALL BANSLV ( W, NROWW, NROW, NBANDL, NBANDU, B )
C        WITH THE SOLUTION X  CONTAINED IN  B  ON RETURN .
C     IF  IFLG = 2, THEN
C        ONE OF  NROW-1, NBANDL,NBANDU FAILED TO BE NONNEGATIVE, OR ELSE
C        ONE OF THE POTENTIAL PIVOTS WAS FOUND TO BE ZERO INDICATING
C        THAT  A  DOES NOT HAVE AN LU-FACTORIZATION. THIS IMPLIES THAT
C        A  IS SINGULAR IN CASE IT IS TOTALLY POSITIVE .
C
C******  M E T H O D  ******
C     GAUSS ELIMINATION  W I T H O U T  PIVOTING IS USED. THE ROUTINE IS
C  INTENDED FOR USE WITH MATRICES  A  WHICH DO NOT REQUIRE ROW INTER-
C  CHANGES DURING FACTORIZATION, ESPECIALLY FOR THE  T O T A L L Y
C  P O S I T I V E  MATRICES WHICH OCCUR IN SPLINE CALCULATIONS.
C     THE ROUTINE SHOULD NOT BE USED FOR AN ARBITRARY BANDED MATRIX.
C
      INTEGER IFLAG,NBANDL,NBANDU,NROW,NROWW,   I,IPK,J,JMAX,K,KMAX
     *                                         ,MIDDLE,MIDMK,NROWM1
      REAL*8 W(NROWW,NROW),   FACTOR,PIVOT
C
      IFLAG = 1
      MIDDLE = NBANDU + 1
C                         W(MIDDLE,.) CONTAINS THE MAIN DIAGONAL OF  A .
      NROWM1  = NROW - 1
      IF (NROWM1)                       999,900,1
    1 IF (NBANDL .GT. 0)                GO TO 10
C                A IS UPPER TRIANGULAR. CHECK THAT DIAGONAL IS NONZERO .
      DO 5 I=1,NROWM1
         IF (W(MIDDLE,I) .EQ. 0.)       GO TO 999
    5    CONTINUE
                                        GO TO 900
   10 IF (NBANDU .GT. 0)                GO TO 20
C              A IS LOWER TRIANGULAR. CHECK THAT DIAGONAL IS NONZERO AND
C                 DIVIDE EACH COLUMN BY ITS DIAGONAL .
      DO 15 I=1,NROWM1
         PIVOT = W(MIDDLE,I)
         IF(PIVOT .EQ. 0.)              GO TO 999
         JMAX = MIN0(NBANDL, NROW - I)
         DO 15 J=1,JMAX
   15       W(MIDDLE+J,I) = W(MIDDLE+J,I)/PIVOT
                                        GO TO 900
C
C        A  IS NOT JUST A TRIANGULAR MATRIX.  CONSTRUCT LU FACTORIZATION
   20 DO 50 I=1, NROWM1
C                                  W(MIDDLE,I)  IS PIVOT FOR I-TH STEP .
         PIVOT = W(MIDDLE,I)
         IF (PIVOT .EQ. 0.)             GO TO 999
C                 JMAX  IS THE NUMBER OF (NONZERO) ENTRIES IN COLUMN  I
C                     BELOW THE DIAGONAL .
         JMAX = MIN0(NBANDL,NROW - I)
C              DIVIDE EACH ENTRY IN COLUMN  I  BELOW DIAGONAL BY PIVOT .
         DO 32 J=1,JMAX
   32       W(MIDDLE+J,I) = W(MIDDLE+J,I)/PIVOT
C                 KMAX  IS THE NUMBER OF (NONZERO) ENTRIES IN ROW  I  TO
C                     THE RIGHT OF THE DIAGONAL .
         KMAX = MIN0(NBANDU,NROW - I)
C                  SUBTRACT  A(I,I+K)*(I-TH COLUMN) FROM (I+K)-TH COLUMN
C                  (BELOW ROW  I ) .
         DO 40 K=1,KMAX
            IPK = I + K
            MIDMK = MIDDLE - K
            FACTOR = W(MIDMK,IPK)
            DO 40 J=1,JMAX
   40          W(MIDMK+J,IPK) = W(MIDMK+J,IPK) - W(MIDDLE+J,I)*FACTOR
   50   CONTINUE
C                                        CHECK THE LAST DIAGONAL ENTRY .
  900 IF (W(MIDDLE,NROW) .NE. 0.)        RETURN
  999 IFLAG = 2
                                         RETURN
      END

banslv.f        496939134   869   730   100755  2247      `
      SUBROUTINE BANSLV ( W, NROWW, NROW, NBANDL, NBANDU, B )
C  COMPANION ROUTINE TO  BANFAC . IT RETURNS THE SOLUTION  X  OF THE
C  LINEAR SYSTEM  A*X = B  IN PLACE OF  B , GIVEN THE LU-FACTORIZATION
C  FOR  A  IN THE WORKARRAY  W .
C
C******  I N P U T  ******
C  W, NROWW,NROW,NBANDL,NBANDU.....DESCRIBE THE LU-FACTORIZATION OF A
C        BANDED MATRIX  A  OF RODER  NROW  AS CONSTRUCTED IN  BANFAC .
C        FOR DETAILS, SEE  BANFAC .
C  B.....RIGHT SIDE OF THE SYSTEM TO BE SOLVED .
C
C****** O U T P U T  ******
C  B.....CONTAINS THE SOLUTION  X , OF ORDER  NROW .
C
C******  M E T H O D  ******
C     (WITH  A = L*U, AS STORED IN  W,) THE UNIT LOWER TRIANGULAR SYSTEM
C  L(U*X) = B  IS SOLVED FOR  Y = U*X, AND  Y  STORED IN  B . THEN THE
C  UPPER TRIANGULAR SYSTEM  U*X = Y  IS SOLVED FOR  X  . THE CALCUL-
C  ATIONS ARE SO ARRANGED THAT THE INNERMOST LOOPS STAY WITHIN COLUMNS.
C
      INTEGER NBANDL,NBANDU,NROW,NROWW,   I,J,JMAX,MIDDLE,NROWM1
      REAL*8 W(NROWW,NROW),B(NROW)
      MIDDLE = NBANDU + 1
      IF (NROW .EQ. 1)                  GO TO 49
      NROWM1 = NROW - 1
C		      IF (NBANDL .EQ. 0)                GO TO 30
      IF(NBANDL.EQ.0) GO TO 30
C                                 FORWARD PASS
C            FOR I=1,2,...,NROW-1, SUBTRACT  RIGHT SIDE(I)*(I-TH COLUMN
C            OF  L )  FROM RIGHT SIDE  (BELOW I-TH ROW) .
      DO 21 I=1,NROWM1
         JMAX = MIN0(NBANDL, NROW-I)
         DO 21 J=1,JMAX
   21       B(I+J) = B(I+J) - B(I)*W(MIDDLE+J,I)
C                                 BACKWARD PASS
C            FOR I=NROW,NROW-1,...,1, DIVIDE RIGHT SIDE(I) BY I-TH DIAG-
C            ONAL ENTRY OF  U, THEN SUBTRACT  RIGHT SIDE(I)*(I-TH COLUMN
C            OF  U)  FROM RIGHT SIDE  (ABOVE I-TH ROW).
   30 IF (NBANDU .GT. 0)                GO TO 40
C                                A  IS LOWER TRIANGULAR .
      DO 31 I=1,NROW
   31    B(I) = B(I)/W(1,I)
                                        RETURN
C   40 DO 45 I=NROW,2,-1
40    NROWA=NROW-1
      DO 45 IZ=1,NROWA
      I=NROW-IZ+1
         B(I) = B(I)/W(MIDDLE,I)
         JMAX = MIN0(NBANDU,I-1)
         DO 45 J=1,JMAX
   45       B(I-J) = B(I-J) - B(I)*W(MIDDLE-J,I)
   49 B(1) = B(1)/W(MIDDLE,1)
                                        RETURN
      END

bchfac.f        496939135   869   730   100755  3444      `
	SUBROUTINE BCHFAC (W,NBANDS,NROW,DIAG)
C
CONSTRUCTS CHOLESKY FACTORIZATION
C			C = L * D * L-TRANSPOSE
C  WITH L UNIT LOWER TRIANGULAR AND D DIAGONAL, FOR GIVEN MATRIX C OF
C  ORDER  N R O W , IN CASE C IS (SYMMETRIC) POSITIVE SEMIDEFINITE
C  AND BANDED, HAVING  N B A N D S  DIAGONALS AT AND BELOW THE MAIN DIAGONAL.
C
C***** I N P U T *****
C  NROW -- IS THE ORDER OF THE MATRIX C.
C  NBANDS -- INDICATES ITS BANDWIDTH, I.E.,
C	C(I,J) = 0 FOR ABS(I-J) .GE. NBANDS .
C  W -- WORKARRAY OF SIZE (NBANDS,NROW) CONTAINING THE NBANDS DIAGONALS
C	IN ITS ROWS, WITH THE MAIN DIAGONAL IN ROW 1. pRECISELY,
C	W(I,J) CONTAINS C(I+J-1,J), I=1,...,NBANDS, J=1,...,NROW.
C	  FOR EXAMPLE, THE INTERESTING ENTRIES OF A SEVEN DIAGONAL 
C	SYMMETRIC MATRIX C OF ORDER 9 WOULD BE STORED IN W AS
C
C		11 22 33 44 55 66 77 88 99
C		21 32 43 54 65 76 87 98
C		31 42 53 64 75 86 97
C		41 52 63 74 85 96
C
C	ALL OTHER INTRIES OF W NOT IDENTIFIED IN THIS WAY WITH AN
C	ENTRY OF C ARE NEVER REFERENCED .
C  DIAG -- IS A WORK ARRAY OF LENGTH NROW .
C
C***** O U T P U T *****
C  W -- CONTAINS THE CHOLESKY FACTORIZATION C = L*D*L-TRANSP, WITH
C	W(1,I) CONTAINING 1/D(I,I)
C	AND W(I,J) CONTAINING L(I-1+J,J), I=2,...,NBANDS.
C
C***** M E T H O D *****
C  GAUSS ELIMINATION, ADAPTED TO THE SYMMETRY AND BANDEDNESS OF C, IS
C  USED.
C    NEAR ZERO PIVOTS ARE HANDLED IN A SPECIAL WAY. THE DIAGONAL ELE-
C  MENT C(N,N)=W(1,N) IS SAVED INITIALLY IN DIAG(N), ALL N. AT THE N-TH
C  ELIMINATION STEP, THE CURRENT PIVOT ELEMENT, VIZ. W(1,N), IS COM-
C  PARED WITH ITS ORIGINAL VALUE, DIAG(N). IF, AS THE RESULT OF PRIOR
C  ELIMINATION STEPS, THIS ELEMENT HAS BEEN REDUCED BY ABOUT A WORD
C  LENGTH, (I.E., IF W(1,N)+DIAG(N) .LE. DIAG(N)), THEN THE PIVOT IS
C  DECLARED TO BE ZERO, AND THE ENTIRE N-TH ROW IS DECLARED TO BE LIN-
C  EARLY DEPENDENT ON THE PRECEDING ROWS. THIS HAS THE EFFECT OF PRO-
C  DUCING X(N)=0 WHEN SOLVING C*X=B FOR X, REGARDLESS OF B. JUSTIFIC-
C  ATION FOR THIS IS AS FOLLOWS. IN CONTEMPLATED APPLICATIONS OF THIS
C  PROGRAM, THE GIVEN EQUATIONS ARE THE NORMAL EQUATIONS FOR SOME LEAST
C  SQUARES APPROXIMATION PROBLEM, DIAG(N)=C(N,N) GIVES THE NORM-SQUARE
C  OF THE N-TH BASIS FUNCTION, AND, AT THIS POINT, W(1,N) CONTAINS THE
C  NORM-SQUARE OF THE ERROR IN THE LEAST-SQUARES APPROXIMATION TO THE
C  N-TH BASIS FUNCTION BY LINEAR COMBINATIONS OF THE FIRST N-1. HAVING
C  W(1,N)+DIAG(N) .LE. DIAG(N) SIGNIFIES THAT THE N-TH FUNCTION IS LIN-
C  EARLY DEPENDENT TO MACHINE ACCURACY ON THE FIRST N-1 FUNCTIONS, 
C  THEREFORE CAN SAFELY BE LEFT OUT FROM THE BASIS OF APPROXIMATING
C  FUNCTIONS.
C    THE SOLUTION OF A LINEAR SYSTEM
C		C*X = B
C  IS EFFECTED BY THE SUCCESSION OF THE FOLLOWING TWO CALLS:
C    CALL BCHFAC (W,NBANDS,NROW,DIAG)  , TO GET FACTORIZATION;
C    CALL BCHSLV (W,NBANDS,NROW,B,X)   , TO SOLVE FOR X.
C
	INTEGER NBANDS,NROW,I,IMAX,J,JMAX,N
	REAL*8 W(NBANDS,NROW),DIAG(NROW),RATIO
C
	IF (NROW .GT. 1) GO TO 9
	IF (W(1,1) .GT. 0.) W(1,1) = 1./W(1,1)
	RETURN
C		STORE DIAGONAL OF C IN DIAG.
9	DO 10 N=1,NROW
10	  DIAG(N) = W(1,N)
C		FACTORIZATION.
	DO 20 N=1,NROW
	  IF (W(1,N)+DIAG(N) .GT. DIAG(N)) GO TO 15
	  DO 14 J=1,NBANDS
14	    W(J,N) = 0.
	    GO TO 20
15	    W(1,N) = 1./W(1,N)
	    IMAX = MIN0(NBANDS-1,NROW-N)
	    IF (IMAX .LT. 1) GO TO 20
	    JMAX = IMAX
	    DO 18 I=1,IMAX
		RATIO = W(I+1,N)*W(1,N)
		DO 17 J=1,JMAX
17		  W(J,N+I) = W(J,N+I)-W(J+I,N)*RATIO
		JMAX = JMAX-1
18		W(I+1,N) = RATIO
20	CONTINUE
C
	RETURN
	END
bchslv.f        496939137   869   730   100755  1630      `
	SUBROUTINE BCHSLV (W,NBANDS,NROW,B)
C
C  SOLVES THE LINEAR SYSTEM  C*X=B  OF ORDER  N R O W  FOR X PROVIDED
C  W CONTAINS THE CHOLESKY FACTORIZATION FOR THE BANDED (SYMMETRIC)
C  POSITIVE DEFINITE MATRIX C AS CONSTRUCTED IN THE SUBROUTINE
C   BCHFAC (QUO VIDE) .
C
C***** I N P U T *****
C  NROW -- IS THE ORDER OF THE MATRIX C .
C  NBANDS -- INDICATES THE BANDWIDTH OF C .
C  W -- CONTAINS THE CHOLESKY FACTORIZATION FOR C, AS OUTPUT FROM
C  	SUBROUTINE BCHFAC (QUO VIDE) .
C  B -- THE VECTOR OF LENGTH  N R O W  CONTAINING THE RIGHT SIDE.
C
C***** O U T P U T *****
C  B -- THE VECTOR OF LENGTH  N R O W  CONTAINING THE SOLUTION .
C
C***** M E T H O D *****
C  WITH THE FACTORIZATION C = L*D*L-TRANSPOSE AVAILABLE, WHERE L IS
C  UNIT LOWER TRIANGULAR AND D IS DIAGONAL, THE TRIANGULAR SYSTEM
C  L*Y = B IS SOLVED FOR Y (FORWARD SUBSTITUTION), Y IS STORED IN B,
C  THE VECTOR D**(-1)*Y IS COMPUTED AND STORED IN B, THEN THE TRIANG-
C  ULAR SYSTEM L-TRANSPOSE*X = D**(-1)*Y IS SOLVED FOR X (BACK SUBSTIT-
C  UTION).
C
	INTEGER NBANDS,NROW,J,JMAX,N,NBNDM1
	REAL*8 W(NBANDS,NROW),B(NROW)
	IF (NROW .GT. 1) GO TO 21
	B(1) = B(1) * W(1,1)
	RETURN
C
C	  FORWARD SUBSTITUTION. SOLVE L*Y = B FOR Y, STORE IN B.
21	NBNDM1 = NBANDS - 1
	DO 30 N=1,NROW
	  JMAX = MIN0(NBNDM1,NROW-N)
	  IF (JMAX .LT. 1) GO TO 30
	  DO 25 J=1,JMAX
25	    B(J+N) = B(J+N) - W(J+1,N)*B(N)
30	CONTINUE
C
C	BACK SUBSTITUTION. SOLVE L-TRANSPOSE*X = D**(-1)*Y FOR X, STORE IN B 
C
	DO 40 N=NROW,1,-1
	  B(N) = B(N)*W(1,N)
	  JMAX = MIN0(NBNDM1,NROW-N)
	  IF (JMAX .LT. 1) GO TO 40
	  DO 35 J=1,JMAX
35	    B(N) = B(N) - W(J+1,N)*B(J+N)
40	CONTINUE
C
	RETURN
	END
bsplpp.f        496939138   869   730   100755  3523      `
	SUBROUTINE BSPLPP(T,BCOEF,N,K,SCRTCH,BREAK,COEF,L)
C
CALLS BSPLVB
C
CONVERTS THE B-REPRESENTATION T, BCOEF, N, K OF SOME SPLINE INTO ITS
C  PP-REPRESENTATION BREAK, COEF, L, K .
C
C***** I N P U T *****
C  T -- KNOT SEQUENCE, OF LENGTH N+K
C  BCOEF -- B-SPLINE COEFFICIENT SEQUENCE, OF LENGTH N
C  N -- LENGTH OF BCOEF AND DIMENSION OF SPLINE SPACE  SPLINE(K,T)
C  K -- ORDER OF THE SPLINE
C 
C**** WARNING -- THE RESTRICTION K .LE. KMAX (=20) IS IMPOSED
C   BY THE ARBITRARY DIMENSION STATEMENT FOR BIATX BELOW, BUT 
C   IS  N O W H E R E   C H E C K E D  FOR.
C
C***** W O R K   S P A C E *****
C  SCRTCH -- OF SIZE (K,K), NEEDED TO CONTAIN BCOEFFS OF A PIECE OF
C  	     THE SPLINE AND ITS K-1 DERIVATIVES
C***** O U T P U T *****
C  BREAK -- BREAKPOINT SEQUENCE, OF LENGTH L+1, CONTAINS (IN INCREASING
C	ORDER) THE DISTINCT POINTS IN THE SEQUENCE T(K),...,T(N+1)
C  COEF -- ARRAY OF SIZE (K,N), WITH COEF(I,J) = (I-1)ST DERIVATIVE OF
C	SPLINE AT BREAK(J) FROM THE RIGHT
C  L -- NUMBER OF POLYNOMIAL PIECES WHICH MAKE UP THE SPLINE IN THE
C	INTERVAL (T(K),T(N+1))
C
C***** M E T H O D *****
C    FOR EACH BREAKPOINT INTERVAL, THE K RELEVANT B-COEFFS OF THE
C  SPLINE ARE FOUND AND THEN DIFFERENCED REPEATEDLY TO GET THE B-COEFFS
C  OF ALL THE DERIVATIVES OF THE SPLINE ON THAT INTERVAL. THE SPLINE
C  AND ITS FIRST K-1 DERIVATIVES ARE THEN EVALUATED AT THE LEFT END
C  POINT OF THAT INTERVAL, USING BSPLVB REPEATEDLY TO OBTAIN THE 
C  VALUES OF ALL B-SPLINES OF THE APPROPRIATE ORDER AT THAT POINT.
C
	PARAMETER (KMAX = 20)
	INTEGER K,L,N, I,J,JP1,KMJ,LEFT,LSOFAR
	REAL*8 BCOEF(N),BREAK(1),COEF(K,1),T(1),  SCRTCH(K,K)
     *  	,BIATX(KMAX),DIFF,FKMJ,SUM
C
C 	DIMENSION BREAK(L+1),COEF(K,L),T(N+K)
	LSOFAR = 0
	BREAK(1) = T(K)
C
C		FIND THE NEXT NONTRIVIAL KNOT INTERVAL.
C
	DO 50 LEFT=K,N
	  IF (T(LEFT+1) .EQ. T(LEFT)) GO TO 50
	  LSOFAR = LSOFAR+1
	  BREAK(LSOFAR+1) = T(LEFT+1)
	  IF (K .GT. 1) GO TO 9
	  COEF(1,LSOFAR) = BCOEF(LEFT)
	  GO TO 50
C
C	STORE THE K B-SPLINE COEFF.S RELEVANT TO CURRENT KNOT INTERVAL
C			     IN  SCRTCH(.,1) .
C
9	DO 10 I=1,K
10	  SCRTCH(I,1) = BCOEF(LEFT-K+I)
C
C	FOR J=1,...,K-1, COMPUTE THE K-J B-SPLINE COEFF.S RELEVANT TO
C	CURRENT KNOT INTERVAL FOR THE J-TH DERIVATIVE BY DIFFERENCING
C	THOSE FOR THE (J-1)ST DERIVATIVE, AND STORE IN SCRTCH(.,J+1).
C
	DO 20 JP1=2,K
	  J = JP1-1
	  KMJ = K-J
	  FKMJ = FLOAT(KMJ)
	  DO 20 I=1,KMJ
	    DIFF = T(LEFT+I) - T(LEFT+I-KMJ)
	    IF (DIFF .GT. 0.) 
     *	      SCRTCH(I,JP1)=((SCRTCH(I+1,J)-SCRTCH(I,J))/DIFF)*FKMJ
20	CONTINUE
C
C	FOR J=0,...,K-1, FIND THE VALUES AT T(LEFT) OF THE J+1
C	B-SPLINES OF ORDER J+1 WHOSE SUPPORT CONTAINS THE CURRENT
C	KNOT INTERVAL FROM THOSE OF ORDER J (IN BIATX), THEN COMBINE
C	WITH B-SPLINE COEFF.S (IN SCRTCH(.,K-J) ) FOUND EARLIER TO
C	COMPUTE THE (K-J-1)ST DERIVATIVE AT T(LEFT) OF THE GIVEN
C	SPLINE.
C	  NOTE:  IF THE REPEATED CALLS TO BSPLVB ARE THOUGHT TO GENERATE
C	TOO MUCH OVERHEAD, THEN REPLACE THE FIRST CALL BY
C	   	BIATX(1) = 1.
C	AND THE SUBSEQUENT CALL BY THE STATEMENT
C		J = JP1 - 1
C	FOLLOWED BY A DIRECT COPY OF THE LINES
C		DELTAR(J) = T(LEFT+J) - X
C			..........
C		BIATX(J) = SAVED
C	FROM BSPLVB . DELTAL(KMAX) AND DELTAR(KMAX) WOULD HAVE TO 
C	APPEAR IN A DIMENSION STATEMENT, OF COURSE.
C
	CALL BSPLVB (T,1,1,T(LEFT),LEFT,BIATX)
	COEF(K,LSOFAR) = SCRTCH(1,K)
	DO 30 JP1=2,K
	  CALL BSPLVB (T,JP1,2,T(LEFT),LEFT,BIATX)
	  KMJ = K+1-JP1
	  SUM = 0.
	  DO 28 I=1,JP1
28	    SUM = BIATX(I)*SCRTCH(I,KMJ) + SUM
30	  COEF(KMJ,LSOFAR) = SUM
50	CONTINUE
C
	L = LSOFAR
	RETURN
	END

bsplvb.f        496939139   869   730   100755  3788      `
      SUBROUTINE BSPLVB ( T, JHIGH, INDEX, X, LEFT, BIATX )
CALCULATES THE VALUE OF ALL POSSIBLY NONZERO B-SPLINES AT  X  OF ORDER
C
C               JOUT  =  MAX( JHIGH , (J+1)*(INDEX-1) )
C
C  WITH KNOT SEQUENCE  T .
C
C******  I N P U T  ******
C  T.....KNOT SEQUENCE, OF LENGTH  LEFT + JOUT  , ASSUMED TO BE NONDE-
C        CREASING.  A S S U M P T I O N . . . .
C                       T(LEFT)  .LT.  T(LEFT + 1)   .
C   D I V I S I O N  B Y  Z E R O  WILL RESULT IF  T(LEFT = T(LEFT+1)
C  JHIGH,
C  INDEX.....INTEGERS WHICH DETERMINE THE ORDER  JOUT = MAX(JHIGH,
C        (J+1)*(INDEX-1))  OF THE B-SPLINES WHOSE VALUES AT  X  ARE TO
C        BE RETURNED.  INDEX  IS USED TO AVOID RECALCULATIONS WHEN SEVE-
C        RAL COLUMNS OF THE TRIANGULAR ARRAY OF B-SLPINE VALUES ARE NEE-
C        DED (E.G., IN  BVALUE  OR IN  BSPLVD ). PRECISELY,
C                     IF  INDEX = 1 ,
C        THE CALCULATION STARTS FROM SCRATCH AND THE ENTIRE TRIANGULAR
C        ARRAY OF B-SPLINE VALUES OF ORDERS 1,2,...,JHIGH  IS GENERATED
C        ORDER BY ORDER , I.E., COLUMN BY COLUMN .
C                     IF  INDEX = 2 ,
C        ONLY THE B-SPLINE VALUES OF ORDER  J+1, J+2, ..., JOUT  ARE GE-
C        NERATED, THE ASSUMPTION BEING THAT  BIATX , J , DELTAL , DELTAR
C        ARE, ON ENTRY, AS THEY WERE ON EXIT AT THE PREVIOUS CALL.
C           IN PARTICULAR, IF  JHIGH = 0, THEN  JOUT = J+1, I.E., JUST
C        THE NEXT COLUMN OF B-SPLINE VALUES IS GENERATED.
C
C  W A R N I N G . . .  THE RESTRICTION   JOUT .LE. JMAX (= 20)  IS IM-
C        POSED ARBITRARILY BY THE DIMENSION STATEMENT FOR  DELTAL  AND
C        DELTAR  BELOW, BUT IS  N O W H E R E  C H E C K E D  FOR .
C
C  X.....THE POINT AT WHICH THE B-SPLINES ARE TO BE EVALUATED.
C  LEFT.....AN INTEGER CHOSEN (USUALLY) SO THAT
C                  T(LEFT) .LE. X .LE. T(LEFT+1)  .
C
C******  O U T P U T  ******
C  BIATX.....ARRAY OF LENGTH  JOUT , WITH  BIATX(I)  CONTAINING THE VAL-
C        UE AT  X  OF THE POLYNOMIAL OF ORDER  JOUT WHICH AGREES WITH
C        THE B-SPLINE  B(LEFT-JOUT+I,JOUT,T)  ON THE INTERVAL (T(LEFT),
C        T(LEFT+1)) .
C
C******  M E T H O D  ******
C  THE RECURRENCE RELATION
C
C                       X - T(I)              T(I+J+1) - X
C     B(I,J+1)(X)  =  -----------B(I,J)(X) + ---------------B(I+1,J)(X)
C                     T(I+J)-T(I)            T(I+J+1)-T(I+1)
C
C  IS USED (REPEATEDLY) TO GENERATE THE (J+1)-VECTOR  B(LEFT-J,J+1)(X),
C  ...,B(LEFT,J+1)(X)  FROM THE J-VECTOR  B(LEFT-J+1,J)(X),...,
C  B(LEFT,J)(X), STORING THE NEW VALUES IN  BIATX  OVER THE OLD.  THE
C  FACTS THAT
C            B(I,1) = 1  IF  T(I) .LE. X .LT. T(I+1)
C  AND THAT
C            B(I,J)(X) = 0  UNLESS  T(I) .LE. X .LT. T(I+J)
C  ARE USED. THE PARTICULAR ORGANIZATION OF THE CALCULATIONS FOLLOWS AL-
C  GORITHM  (8)  IN CHAPTER X OF THE TEXT.
C
      INTEGER INDEX,JHIGH,LEFT,   I,J,JP1
      REAL*8 BIATX(JHIGH),T(1),X,   DELTAL(20),DELTAR(20),SAVED,TERM
C     DIMENSION BIATX(JOUT), T(LEFT+JOUT)
CURRENT FORTRAN STANDARD MAKES IT IMPOSSIBLE TO SPECIFY THE LENGTH OF
C  T  AND OF  BIATX  PRECISELY WITHOUT THE INTRODUCTION OF OTHERWISE
C  SUPERFLUOUS ADDITIONAL ARGUMENTS.
      DATA J/1/
C     SAVE J,DELTAL,DELTAR (VALID IN FORTRAN 77)
C
                                        GO TO (10,20), INDEX
   10 J = 1
      BIATX(1) = 1.
      IF (J .GE. JHIGH)                 GO TO 99
C
   20    JP1 = J + 1
         DELTAR(J) = T(LEFT+J) - X
         DELTAL(J) = X - T(LEFT+1-J)
         SAVED = 0.
         DO 26 I=1,J
            TERM = BIATX(I)/(DELTAR(I) + DELTAL(JP1-I))
            BIATX(I) = SAVED + DELTAR(I)*TERM
   26       SAVED = DELTAL(JP1-I)*TERM
         BIATX(JP1) = SAVED
         J = JP1
         IF (J .LT. JHIGH)              GO TO 20
C
   99                                   RETURN
      END
bvalue.f        496939141   869   730   100755  5103      `
      DOUBLE PRECISION FUNCTION BVALUE ( T, BCOEF, N, K, X, JDERIV )
CALLS  INTERV
C
CALCULATES VALUE AT  X  OF  JDERIV-TH DERIVATIVE OF SPLINE FROM B-REPR.
C  THE SPLINE IS TAKEN TO BE CONTINUOUS FROM THE RIGHT.
C
C******  I N P U T  ******
C  T, BCOEF, N, K......FORMS THE B-REPRESENTATION OF THE SPLINE  F  TO
C        BE EVALUATED. SPECIFICALLY,
C  T.....KNOT SEQUENCE, OF LENGTH  N+K, ASSUMED NONDECREASING.
C  BCOEF.....B-COEFFICIENT SEQUENCE, OF LENGTH  N .
C  N.....LENGTH OF BCOEF AND DIMENSION OF SPLINE(K,T),
C        A S S U M E D  POSITIVE .
C  K.....ORDER OF THE SPLINE .
C
C  W A R N I N G . . .   THE RESTRICTION  K .LE. KMAX (=20)  IS IMPOSED
C        ARBITRARILY BY THE DIMENSION STATEMENT FOR  AJ, DL, DR  BELOW,
C        BUT IS  N O W H E R E  C H E C K E D  FOR.
C
C  X.....THE POINT AT WHICH TO EVALUATE .
C  JDERIV.....INTEGER GIVING THE ORDER OF THE DERIVATIVE TO BE EVALUATED
C        A S S U M E D  TO BE ZERO OR POSITIVE.
C
C******  O U T P U T  ******
C  BVALUE.....THE VALUE OF THE (JDERIV)-TH DERIVATIVE OF  F  AT  X .
C
C******  M E T H O D  ******
C   THE NONTRIVIAL KNOWN INTERVAL  (T(I),T(I+1))  CONTAINING  X  IS LO-
C  CATED WITH THE AID OF  INTERV . THE  K  B-COEFFS OF  F  RELEVANT FOR
C  THIS INTERVAL ARE THEN OBTAINED FROM  BCOEF (0R TAKEN TO BE ZERO IF
C  NOT EXPLICITLY AVAILABLE) AND ARE THEN DIFFERENCED  JDERIV  TIMES TO
C  OBTAIN THE B-COEFFS OF  (D**JDERIV)F  RELEVANT FOR THAT INTERVAL.
C  PRECISELY, WITH  J = JDERIV, WE HAVE FROM X.(12) OF THE TEXT THAT
C
C     (D**J)F  =  SUM ( BCOEF(.,J)*B(.,K-J,T) )
C
C  WHERE
C                   /BCOEF(.),                      ,  J.EQ. 0
C                   /
C    BCOEF(.,J)  =  /BCOEF(.,J-1) - BCOEF(.-1.J-1)
C                   /_____________________________ ,  J .GT.0
C                   /   (T(.+K-J) - T(.))/(K-J)
C
C    THEN, WE USE REPEATEDLY THE FACT THAT
C
C    SUM ( A(.)*B(.,M,T)(X) )  =  SUM ( A(.,X)*B(.,M-1,T)(X) )
C  WITH
C                 (X - T(.))*A(.) + (T(.+M-1) - X)*A(.-1)
C    A(.,X)  =    _______________________________________
C                 (X - T(.))      + (T(.+M-1) - X)
C
C  TO WRITE  (D**J)F(X)  EVENTUALLY AS A LINEAR COMBINATION OF B-SPLINES
C  OF ORDER  1 , AND THE COEFFICIENT FOR  B(I,1,T)(X)  MUST THEN BE THE
C  DESIRED NUMBER  (D**J)F(X).  (SEE X.(17)-(19) OF TEXT).
C
      INTEGER JDERIV,K,N,   I,ILO,IMK,J,JC,JCMIN,JCMAX,JJ,KMJ,KM1,MFLAG
     *                     ,NMI
      REAL*8 BCOEF(N),T(1),X,   AJ(20),DL(20),DR(20),FKMJ
C     DIMENSION T(N+K)
CURRENT FORTRAN STANDARD MAKES IT IMPOSSIBLE TO SPECIFY THE LENGTH OF  T
C  PRECISELY WITHOUT THE INTRODUCTION OF OTHERWISE SUPERFLUOUS ADDITION-
C  AL ARGUMENTS.
      BVALUE = 0.
      IF (JDERIV .GE. K)                GO TO 99
C
C  *** FIND  I   S.T.   1 .LE. I .LT. N+K   AND   T(I) .LT. T(I+1)   AND
C      T(I) .LE. X .LT. T(I+1) . IF NO SUCH I CAN BE FOUND,  X  LIES
C      OUTSIDE THE SUPPORT OF  THE SPLINE  F  AND  BVALUE = 0.
C      (THE ASYMMETRY IN THIS CHOICE OF  I  MAKES  F  RIGHTCONTINUOUS)
      CALL INTERV ( T, N+K, X, I, MFLAG )
      IF (MFLAG .NE. 0)                 GO TO 99
C  *** IF K = 1 (AND JDERIV = 0), BVALUE = BCOEF(I).
      KM1 = K - 1
      IF (KM1 .GT. 0)                   GO TO 1
      BVALUE = BCOEF(I)
                                        GO TO 99
C
C  *** STORE THE K B-SPLINE COEFFICIENTS RELEVANT FOR THE KNOW INTERVAL
C     (T(I),T(I+1)) IN AJ(1),...,AJ(K) AND COMPUTE DL(J) = X - T(I+1-J),
C     DR(J) = T(I+J) - X, J=1,...,K-1 . SET ANY OF THE AJ NOT OBTAINABLE
C     FROM INPUT TO ZERO.  SET ANY T.S NOT OBTAINABLE EQUAL TO T(1) OR
C     TO T(N+K) APPROPRIATELY.
    1 JCMIN = 1
      IMK = I - K
      IF (IMK .GE. 0)                   GO TO 8
      JCMIN = 1 - IMK
      DO 5 J=1,I
    5    DL(J) = X - T(I+1-J)
      DO 6 J=I,KM1
         AJ(K-J) = 0.
    6    DL(J) = DL(I)
                                        GO TO 10
    8 DO 9 J=1,KM1
    9    DL(J) = X - T(I+1-J)
C
   10 JCMAX = K
      NMI = N - I
      IF (NMI .GE. 0)                   GO TO 18
      JCMAX = K + NMI
      DO 15 J=1,JCMAX
   15    DR(J) = T(I+J) - X
      DO 16 J=JCMAX,KM1
         AJ(J+1) = 0.
   16    DR(J) = DR(JCMAX)
                                        GO TO 20
   18 DO 19 J=1,KM1
   19    DR(J) = T(I+J) - X
C
   20 DO 21 JC=JCMIN,JCMAX
   21    AJ(JC) = BCOEF(IMK + JC)
C
C               *** DIFFERENCE THE COEFFICIENTS  JDERIV  TIMES.
      IF (JDERIV .EQ. 0)                GO TO 30
      DO 23 J=1,JDERIV
         KMJ = K-J
         FKMJ = FLOAT(KMJ)
         ILO = KMJ
         DO 23 JJ=1,KMJ
            AJ(JJ) = ((AJ(JJ+1) - AJ(JJ))/(DL(ILO) + DR(JJ)))*FKMJ
   23       ILO = ILO - 1
C
C  *** COMPUTE VALUE AT  X  IN (T(I),T(I+1)) OF JDERIV-TH DERIVATIVE,
C     GIVEN ITS RELEVANT B-SPLINE COEFFS IN AJ(1),...,AJ(K-JDERIV).
   30 IF (JDERIV .EQ. KM1)              GO TO 39
      JTEMP1=JDERIV+1
      DO 33 J=JTEMP1,KM1
         KMJ = K-J
         ILO = KMJ
         DO 33 JJ=1,KMJ
            AJ(JJ) = (AJ(JJ+1)*DL(ILO) + AJ(JJ)*DR(JJ))/(DL(ILO)+DR(JJ))
   33       ILO = ILO - 1
   39 BVALUE = AJ(1)
C
   99                                   RETURN
      END

cholid.f        496939142   869   730   100755  1648      `
C
	SUBROUTINE CHOLID ( P, V, QTY, NPOINT, NCOL, U, QU )
C  TO BE CALLED IN  S M O O T H
C
CONSTRUCTS THE UPPER THREE DIAGS. IN V(I,J), I=2,NPOINT-1, J=1,3, OF
C  THE MATRIX  6*(1-P)*Q-TRANSP.*(D**2)*Q + P*R, THEN COMPUTES ITS
C  L*L-TRANSP. DECOMPOSITION AND STORES IT ALSO IN V, THEN APPLIES
C  FORWARD AND BACKSUBSTITUTION TO THE RIGHT SIDE Q-TRANSP.*Y IN  QTY
C  TO OBTAIN THE SOLUTION IN  U.
	INTEGER NCOL,NPOINT,   I,NPM1,NPM2
	REAL*8 P,QTY(NPOINT),QU(NPOINT),U(NPOINT),V(NPOINT,7)
     *        ,SIX1MP,TWOP,RATIO,PREV
	NPM1 = NPOINT - 1
C	CONSTRUCT 6*(1-P)*Q-TRANSP.*(D**2)*Q + P*R
	SIX1MP = 6.*(1.-P)
	TWOP = 2.*P
	DO 2 I=2,NPM1
	   V(I,1) = SIX1MP*V(I,5) + TWOP*(V(I-1,4)+V(I,4))
	   V(I,2) = SIX1MP*V(I,6) + P*V(I,4)
2	   V(I,3) = SIX1MP*V(I,7)
	NPM2 = NPOINT - 2
	IF (NPM2 .GE. 2)                   GO TO 10
	U(1) = 0.
	U(2) = QTY(2)/V(2,1)
	U(3) = 0.
	                                   GO TO 41
C  FACTORIZATION
10	DO 20 I=2,NPM2
	   RATIO = V(I,2)/V(I,1)
	   V(I+1,1) = V(I+1,1) - RATIO*V(I,2)
	   V(I+1,2) = V(I+1,2) - RATIO*V(I,3)
	   V(I,2) = RATIO
	   RATIO = V(I,3)/V(I,1)
	   V(I+2,1) = V(I+2,1) - RATIO*V(I,3)
20	   V(I,3) = RATIO
C
C  FORWARD SUBSTITUTION
	U(1) = 0.
	V(1,3) = 0.
	U(2) = QTY(2)
	DO 30 I=2,NPM2
30	   U(I+1) = QTY(I+1) - V(I,2)*U(I) - V(I-1,3)*U(I-1)
C
C  BACK SUBSTITUTION
	U(NPOINT) = 0.
	U(NPM1) = U(NPM1)/V(NPM1,1)
	DO 40 I=NPM2,2,-1
40         U(I) = U(I)/V(I,1)-U(I+1)*V(I,2)-U(I+2)*V(I,3)
C
C  CONSTRUCT Q*U
41	PREV = 0.
	DO 50 I=2,NPOINT
	   QU(I) = (U(I) - U(I-1))/V(I-1,4)
	   QU(I-1) = QU(I) - PREV
50	   PREV = QU(I)
	QU(NPOINT) = -QU(NPOINT)
                                           RETURN
	END
cubspl.f        496939143   869   730   100755  5137      `
      SUBROUTINE CUBSPL (TAU, C, N, IBCBEG, IBCEND)
C  ******************* INPUT ****************************
C  N = NUMBER OF  DATA POINTS. ASSUMED TO BE .GE. 2.
C  (TAU(I), C(1,I), I=1,...,N) = ABSCISSAE AND ORDINATES OF THE
C    DATA POINTS. TAU IS ASSUMED TO BE STRICTLY INCREASING.
C  IBCBEG, IBCEND = BOUNDARY CONDITION INDICATORS, AND
C  C(2,1), C(2,N) = BOUNDARY CONDITION INFORMATION. SPECIFICALLY,
C     IBCBEG = 0 MEANS NO BOUNDARY CONDITION AT TAU(1) IS GIVEN.
C        IN THIS CASE, THE NOT-A-KNOT CONDITION IS USED, I.E. THE
C        JUMP IN THE THIRD DERIVATIVE ACROSS TAU(2) IS FORCED TO
C        ZERO, THUS THE FIRST AND THE SECOND CUBIC POLYNOMIAL PIECES
C        ARE MADE TO COINCIDE.)
C     IBCBEG = 1 MEANS THAT THE SLOPE AT TAU(1) IS MADE TO EQUAL
C        C(2,1), SUPPLIED BY INPUT.
C     IBCBEG = 2 MEANS THAT THE SECOND DERIVATIVE AT TAU(1) IS
C        MADE TO EQUAL C(2,1), SUPPLIED BY INPUT.
C     IBCEND = 0, 1, OR 2 HAS ANALOGOUS MEANING CONCERNING THE
C        BOUNDARY CONDITION AT TAU(N), WITH THE ADDITIONAL INFOR-
C        MATION TAKEN FROM C(2,N).
C************************ OUTPUT ***************************
C  C(J,I), J=1,...,4; I=1,...,L (= N-1) = THE POLYNOMIAL COEFFICIENTS
C     OF THE CUBIC INTERPOLATING SPLINE WITH INTERIOR KNOTS (OR
C     JOINTS) TAU(2),..., TAU(N-1). PRECISELY, IN THE INTERVAL
C     (TAU(I), TAU(I+1)), THE SPLINE FUNCTION IS GIVEN BY
C        F(X) = C(1,I)+H*(C(2,I)+H*(C(3,I)+H*C(4,I)/3.)/2.)
C     WHERE H = X - TAU(I). THE FUNCTION PROGRAM *PPVALU* MAY BE
C     USED TO EVALUATE F OR ITS DERIVATIVES FROM TAU,C, L= N-1,
C     AND K=4.
      INTEGER IBCBEG,IBCEND,N,I,J,L,M
      REAL*8 C(4,N),TAU(N),DIVDF1,DIVDF3,DTAU,G
C****** A TRIDIAGONAL LINEAR SYSTEM FOR THE UNKNOWN SLOPES S(I) OF
C  F AT TAU(I), I=1,...,N IS GENERATED AND THEN SOLVED BY GAUSS
C  ELIMINATION, WITH S(I) ENDING UP IN C(2,I), ALL I.
C     C(3,.) AND C(4,.) ARE USED INITIALLY FOR TEMPORARY STORAGE
      L=N-1
COMPUTE FIRST DIFFERENCES OF TAU SEQUENCE AND STORE IN C(3,.). ALSO,
COMPUTE FIRST DIVIDED DIFFERENCE OF DATA AND STORE IN C(4,.).
      DO 10 M=2,N
	 C(3,M)=TAU(M)-TAU(M-1)
   10    C(4,M)=(C(1,M)-C(1,M-1))/C(3,M)
CONSTRUCT FIRST EQUATION FROM THE BOUNDARY CONDITION, OF THE FORM
C        C(4,1)*S(1) + C(3,1)*S(2) = C(2,1)
      IF (IBCBEG-1)                  11,15,16
   11 IF (N .GT. 2)                  GO TO 12
C      NO CONDITION AT LEFT END AND N = 2.
      C(4,1) = 1.
      C(3,1) = 1.
      C(2,1) = 2.*C(4,2)
			             GO TO 25
C     NOT-A-KNOT CONDITION AT LEFT END AND N .GT. 2.
   12 C(4,1) = C(3,3)
      C(3,1) = C(3,2) + C(3,3)
      C(2,1) = ((C(3,2)+2.*C(3,1))*C(4,2)*C(3,3)+C(3,2)**2
     *                 *C(4,3))/C(3,1)
			             GO TO 19
C     SLOPE PRESCRIBED AT LEFT END.
   15 C(4,1) = 1.
      C(3,1) = 0.
				     GO TO 18
C     SECOND DERIVATIVE PRESCRIBED AT LEFT END.
   16 C(4,1) = 2.
      C(3,1) = 1.
      C(2,1) = 3.*C(4,2) - C(3,2)/2.*C(2,1)
   18 IF (N .EQ. 2)                  GO TO 25
C  IF THENE ARE INTERIOR KNOTS, GENERATE THE CORRESP. EQUATIONS AND
C  CARRY OUT THE FORWARD PASS OF GAUSS ELIMINATION, AFTER WHICH THE
C  M-TH EQUATION READS  C(4,M)*S(M) + C(3,M)*S(M+1) = C(2,M).
   19 DO 20 M=2,L
	 G= -C(3,M+1)/C(4,M-1)
	 C(2,M)= G*C(2,M-1) + 3.*(C(3,M)*C(4,M+1)+C(3,M+1)*C(4,M))
   20    C(4,M)= G*C(3,M-1) + 2.*(C(3,M) + C(3,M+1))
CONSTRUCT LAST EQUATION FROM THE SECOND BOUNDARY CONDITION, OF THE FORM
C       (-G*C(4,N-1))*S(N-1) + C(4,N)*S(N) = C(2,N)
C    IF SLOPE IS PRESCRIBED AT RIGHT END, ONE CAN GO DIRECTLY TO BACK-
C    SUBSTITUTION, SINCE C ARRAY HAPPENS TO BE SET UP JUST RIGHT FOR IT,
C    AT THIS POINT.
      IF (IBCEND-1)                  21,30,24
   21 IF (N .EQ. 3 .AND. IBCBEG .EQ. 0) GO TO 22
C    NOT-A-KNOT AND N .GE. 3, AND EITHER N.GT.3 OR ALSO NOT-A-KNOT AT
C    LEFT END POINT.
      G= C(3,N-1) + C(3,N)
      C(2,N)= ((C(3,N)+2.*G)*C(4,N)*C(3,N-1)
     *          + C(3,N)**2*(C(1,N-1)-C(1,N-2))/C(3,N-1))/G
      G= -G/C(4,N-1)
      C(4,N)= C(3,N-1)
					GO TO 29
C    EITHER (N=3 AND NOT-A-KNOT ALSO AT LEFT) OR (N=2 AND NOT-A-
C    KNOT AT LEFT END POINT).
   22 C(2,N)= 2.*C(4,N)
      C(4,N)= 1.
					GO TO 28
C    SECOND DERIVATIVE PRESCRIBED AT RIGHT ENDPOINT.
   24 C(2,N)= 3.*C(4,N) + C(3,N)/2.*C(2,N)
      C(4,N)= 2.
					GO TO 28
   25 IF (IBCEND-1)                     26,30,24
   26 IF (IBCBEG .GT. 0)                GO TO 22
C    NOT-A-KNOT AT RIGHT ENDPOINT AND AT LEFT ENDPOINT AND N =2.
      C(2,N)= C(4,N)
                                  GO TO 30
   28 G= -1./C(4,N-1)
COMPLETE FORWARD PASS OF GAUSS ELIMINATION
   29 C(4,N)= G*C(3,N-1) + C(4,N)
      C(2,N)= (G*C(2,N-1) + C(2,N)) / C(4,N)
CARRY OUT BACK SUBSTITUTION
   30 DO 40 J=L,1,-1
   40    C(2,J)= (C(2,J) - C(3,J)*C(2,J+1))/C(4,J)
C****** GENERATE CUBIC COEFFICIENTS IN EACH INTERVAL, I.E., THE
C  DERIV.S AT ITS LEFT ENDPOINT, FROM VALUE AND SLOPE AT ITS ENDPOINTS.
      DO 50 I=2,N
	 DTAU= C(3,I)
	 DIVDF1= (C(1,I) - C(1,I-1))/DTAU
	 DIVDF3= C(2,I-1) + C(2,I) - 2.*DIVDF1
	 C(3,I-1)= 2.*(DIVDF1 - C(2,I-1) - DIVDF3)/DTAU
   50 C(4,I-1)= (DIVDF3/DTAU)*(6./DTAU)
                                RETURN
      END

dcrvp1.f        496939145   869   730   100755  4967      `
      SUBROUTINE DCRVP1(N, X, Y, P, YP, TEMP, SIGMA, IERR)
C
      INTEGER N, IERR
      DOUBLE PRECISION X(N),Y(N),P,YP(N),TEMP(1),SIGMA
C*S   REAL X(N), Y(N), P, YP(N), TEMP(1), SIGMA
C
C                      MODIFIED
C                      FROM THE SPLINE UNDER TENSION PACKAGE
C                    CODED BY A. K. CLINE AND S. E. GALINSKY
C                            DEPARTMENT OF COMPUTER SCIENCES
C                              UNIVERSITY OF TEXAS AT AUSTIN
C
C                      MODIFICATION IS FOR THE CONTOUR
C                      ANALYSIS PACKAGE CODED BY
C                      RALPH BAKER KEARFOTT, DEPARTMENT
C                      OF MATHEMATICS AND STATISTICS
C                      UNIVERSITY OF SOUTHWESTERN LOUISIANA
C
C THIS SUBROUTINE DETERMINES THE PARAMETERS NECESSARY TO
C COMPUTE A PERIODIC INTERPOLATORY SPLINE UNDER TENSION
C THROUGH A SEQUENCE OF FUNCTIONAL VALUES. FOR ACTUAL ENDS
C OF THE CURVE MAY BE SPECIFIED OR OMITTED.  FOR ACTUAL
C COMPUTATION OF POINTS ON THE CURVE IT IS NECESSARY TO CALL
C THE FUNCTION DCRVP2.
C
C ON INPUT--
C
C   N IS THE NUMBER OF VALUES TO BE INTERPOLATED (N.GE.2).
C
C   X IS AN ARRAY OF THE N INCREASING ABSCISSAE OF THE
C   FUNCTIONAL VALUES.
C
C   Y IS AN ARRAY OF THE N ORDINATES OF THE VALUES, (I. E.
C   Y(K) IS THE FUNCTIONAL VALUE CORRESPONDING TO X(K) ).
C
C   P IS THE PERIOD (P.GT.X(N)-X(1)).
C
C   YP IS AN ARRAY OF LENGTH AT LEAST N.
C
C   TEMP IS AN ARRAY OF LENGTH AT LEAST 2*N WHICH IS USED
C   FOR SCRATCH STORAGE.
C
C AND
C
C   SIGMA CONTAINS THE TENSION FACTOR.  THIS VALUE INDICATES
C   THE CURVINESS DESIRED. IF ABS(SIGMA) IS NEARLY ZERO
C   (E.G. .001) THE RESULTING CURVE IS APPROXIMATELY A
C   CUBIC SPLINE. IF ABS(SIGMA) IS LARGE (E.G. 50.) THE
C   RESULTING CURVE IS NEARLY A POLYGONAL LINE. IF SIGMA
C   EQUALS ZERO A CUBIC SPLINE RESULTS.  A STANDARD VALUE
C   FOR SIGMA IS APPROXIMATELY 1. IN ABSOLUTE VALUE.
C
C ON RETURN--
C
C   YP CONTAINS THE VALUES OF THE SECOND DERIVATIVE OF THE
C   CURVE AT THE GIVEN NODES.
C
C   IERR CONTAINS AN ERROR FLAG,
C        = 0 FOR NORMAL RETURN,
C        = 1 IF N IS LESS THAN 2,
C        = 2 IF P IS LESS THAN X(N)-X(1),
C        = 3 IF X-VALUES ARE NOT STRICTLY INCREASING.
C
C AND
C
C  N, X, Y, AND SIGMA ARE UNALTERED.
C
C ADDITIONAL NOTES--
C
C   THE FORTRAN ROUTINES ABS AND FLOAT (DABS, DBLE, AND
C   FLOAT FOR DOUBLE PRECISION) ARE CALLED.
C
C   THIS SUBROUTINE REFERENCES MODIFIED SPLINE UNDER TEN-
C   SION PACKAGE MODULE DTERMS.
C
C-----------------------------------------------------------
C
      DOUBLE PRECISION DBLE, DELX1, DELX2, DIAG, DIAG1, DIAG2,
     *DX1, DX2, SDIAG1, SDIAG2, SIGMAP, YPN
C*S   REAL DELX1, DELX2, DIAG, DIAG1, DIAG2, DX1, DX2, SDIAG1, SDIAG2,
C*S  * SIGMAP, YPN
      INTEGER I, IBAK, NM1, NP1, NPI, NPIBAK
C
      DOUBLE PRECISION ZERO
      DATA ZERO /0.0D0/
C*S   REAL ZERO
C*S   DATA ZERO /0.0E0/
      NM1 = N - 1
      NP1 = N + 1
      IERR = 0
      IF (N.LE.1) GO TO 60
      IF (P.LT.X(N)-X(1) .OR. P.EQ.ZERO) GO TO 70
C
C DENORMALIZE TENSION FACTOR.
C
      SIGMAP = DABS(SIGMA)*DBLE(FLOAT(N))/P
C*S   SIGMAP = ABS(SIGMA)*(FLOAT(N))/P
C
C SET UP RIGHT HAND SIDE AND TRIDIAGONAL SYSTEM FOR YP AND
C PERFORM FORWARD ELIMINATION.
C
      DELX1 = P - (X(N)-X(1))
      DX1 = (Y(1)-Y(N))/DELX1
      CALL DTERMS(DIAG1, SDIAG1, SIGMAP, DELX1)
      DELX2 = X(2) - X(1)
      IF (DELX2.LE.ZERO) GO TO 80
      DX2 = (Y(2)-Y(1))/DELX2
      CALL DTERMS(DIAG2, SDIAG2, SIGMAP, DELX2)
      DIAG = DIAG1 + DIAG2
      YP(1) = (DX2-DX1)/DIAG
      TEMP(NP1) = -SDIAG1/DIAG
      TEMP(1) = SDIAG2/DIAG
      DX1 = DX2
      DIAG1 = DIAG2
      SDIAG1 = SDIAG2
      IF (N.EQ.2) GO TO 20
      DO 10 I=2,NM1
        NPI = N + I
        DELX2 = X(I+1) - X(I)
        IF (DELX2.LE.ZERO) GO TO 80
        DX2 = (Y(I+1)-Y(I))/DELX2
        CALL DTERMS(DIAG2, SDIAG2, SIGMAP, DELX2)
        DIAG = DIAG1 + DIAG2 - SDIAG1*TEMP(I-1)
        YP(I) = (DX2-DX1-SDIAG1*YP(I-1))/DIAG
        TEMP(NPI) = -TEMP(NPI-1)*SDIAG1/DIAG
        TEMP(I) = SDIAG2/DIAG
        DX1 = DX2
        DIAG1 = DIAG2
        SDIAG1 = SDIAG2
   10 CONTINUE
   20 DELX2 = P - (X(N)-X(1))
      DX2 = (Y(1)-Y(N))/DELX2
      CALL DTERMS(DIAG2, SDIAG2, SIGMAP, DELX2)
      YP(N) = DX2 - DX1
      TEMP(NM1) = TEMP(2*N-1) - TEMP(NM1)
      IF (N.EQ.2) GO TO 40
C
C PERFORM FIRST STEP OF BACK SUBSTITUTION.
C
      DO 30 I=3,N
        IBAK = NP1 - I
        NPIBAK = N + IBAK
        YP(IBAK) = YP(IBAK) - TEMP(IBAK)*YP(IBAK+1)
        TEMP(IBAK) = TEMP(NPIBAK) - TEMP(IBAK)*TEMP(IBAK+1)
   30 CONTINUE
   40 YP(N) = (YP(N)-SDIAG2*YP(1)-SDIAG1*YP(NM1))/(DIAG1+DIAG2+SDIAG2*
     * TEMP(1)+SDIAG1*TEMP(NM1))
C
C PERFORM SECOND STEP OF BACK SUBSTITUTION.
C
      YPN = YP(N)
      DO 50 I=1,NM1
        YP(I) = YP(I) + TEMP(I)*YPN
   50 CONTINUE
      RETURN
C
C TOO FEW POINTS
C
   60 IERR = 1
      RETURN
C
C PERIOD TOO SMALL
C
   70 IERR = 2
      RETURN
C
C X-VALUES NOT STRICTLY INCREASING
C
   80 IERR = 3
      RETURN
      END

dcrvp2.f        496939146   869   730   100755  3702      `
      DOUBLE PRECISION FUNCTION DCRVP2 (T,N,X,Y,P,YP,SIGMA)
C*S   REAL FUNCTION DCRVP2(T, N, X, Y, P, YP, SIGMA)
C
      INTEGER N
      DOUBLE PRECISION T,X(N),Y(N),P,YP(N),SIGMA
C*S   REAL T, X(N), Y(N), P, YP(N), SIGMA
C
C                      MODIFIED
C                      FROM THE SPLINE UNDER TENSION PACKAGE
C                    CODED BY A. K. CLINE AND S. E. GALINSKY
C                            DEPARTMENT OF COMPUTER SCIENCES
C                              UNIVERSITY OF TEXAS AT AUSTIN
C
C                      MODIFICATION IS FOR THE CONTOUR
C                      ANALYSIS PACKAGE CODED BY
C                      RALPH BAKER KEARFOTT, DEPARTMENT
C                      OF MATHEMATICS AND STATISTICS
C                      UNIVERSITY OF SOUTHWESTERN LOUISIANA
C
C THIS FUNCTION INTERPOLATES A CURVE AT A GIVEN POINT USING
C A PERIODIC SPLINE UNDER TENSION. THE SUBROUTINE DCRVP1
C SHOULD BE CALLED EARLIER TO DETERMINE CERTAIN NECESSARY
C PARAMETERS.
C
C ON INPUT--
C
C   T CONTAINS A REAL VALUE TO BE MAPPED ONTO THE INTERPO-
C   LATING CURVE.
C
C   N CONTAINS THE NUMBER OF POINTS WHICH WERE SPECIFIED TO
C   DETERMINE THE CURVE.
C
C   X AND Y ARE ARRAYS CONTAINING THE ABSCISSAE AND
C   ORDINATES, RESPECTIVELY, OF THE SPECIFIED POINTS.
C
C   P CONTAINS THE PERIOD.
C
C   YP IS AN ARRAY OF SECOND DERIVATIVE VALUES OF THE CURVE
C   AT THE NODES.
C
C AND
C
C   SIGMA CONTAINS THE TENSION FACTOR (ITS SIGN IS IGNORED).
C
C THE PARAMETERS N, X, Y, P, YP, AND SIGMA SHOULD BE INPUT
C UNALTERED FROM THE OUTPUT OF DCRVP1.
C
C ON RETURN--
C
C   DCRVP2 CONTAINS THE INTERPOLATED VALUE.
C
C   NONE OF THE INPUT PARAMETERS ARE ALTERED.
C
C ADDITIONAL NOTES--
C
C   THE FORTRAN ROUTINES ABS AND FLOAT (DABS, DBLE, AND
C   FLOAT FOR DOUBLE PRECISION) ARE CALLED.
C
C   THIS FUNCTION REFERENCES MODIFIED SPLINE UNDER TENSION
C   MODULES INTDVP AND DNHCSH.
C
C-----------------------------------------------------------
C
      DOUBLE PRECISION COSHP1, COSHP2, DEL1, DEL2, DELP1,
     *DELP2, DELS, DUMMY, DBLE, SIGMAP, SINHM1, SINHM2, SINHMS,
     *SINHP1, SINHP2, SUM, TP
C*S   REAL COSHP1, COSHP2, DEL1, DEL2, DELP1, DELP2, DELS, DUMMY,
C*S  * SIGMAP, SINHM1, SINHM2, SINHMS, SINHP1, SINHP2, SUM, TP
      INTEGER I, IM1, INTDVP
C
      DOUBLE PRECISION ZERO,ONE,TWO,SIX
      DATA ZERO/0.0D0/, ONE/1.0D0/, TWO/2.0D0/, SIX/6.0D0/
C*S   REAL ZERO, ONE, TWO, SIX
C*S   DATA ZERO /0.0E0/, ONE /1.0E0/, TWO /2.0E0/, SIX /6.0E0/
C
C DETERMINE INTERVAL.
C
      IM1 = INTDVP(T,X,N,P,TP)
      I = IM1 + 1
C
C DENORMALIZE TENSION FACTOR.
C
      SIGMAP = DABS(SIGMA)*DBLE(FLOAT(N))/P
C*S   SIGMAP = ABS(SIGMA)*(FLOAT(N))/P
C
C SET UP AND PERFORM INTERPOLATION.
C
      DEL1 = TP - X(IM1)
      IF (IM1.EQ.N) GO TO 10
      DEL2 = X(I) - TP
      DELS = X(I) - X(IM1)
      GO TO 20
   10 I = 1
      DEL2 = X(1) + P - TP
      DELS = P - (X(N)-X(1))
   20 SUM = (Y(I)*DEL1+Y(IM1)*DEL2)/DELS
      IF (SIGMAP.NE.ZERO) GO TO 30
      DCRVP2 = SUM - DEL1*DEL2*(YP(I)*(DEL1+DELS)+YP(IM1)*(DEL2+DELS))/
     * (SIX*DELS)
      RETURN
   30 DELP1 = SIGMAP*(DEL1+DELS)/TWO
      DELP2 = SIGMAP*(DEL2+DELS)/TWO
      CALL DNHCSH(SINHM1, DUMMY, SIGMAP*DEL1, -1)
      CALL DNHCSH(SINHM2, DUMMY, SIGMAP*DEL2, -1)
      CALL DNHCSH(SINHMS, DUMMY, SIGMAP*DELS, -1)
      CALL DNHCSH(SINHP1, DUMMY, SIGMAP*DEL1/TWO, -1)
      CALL DNHCSH(SINHP2, DUMMY, SIGMAP*DEL2/TWO, -1)
      CALL DNHCSH(DUMMY, COSHP1, DELP1, 1)
      CALL DNHCSH(DUMMY, COSHP2, DELP2, 1)
      DCRVP2 = SUM + (YP(I)*(SINHM1*DEL2-DEL1*(TWO*(COSHP1+ONE)*
     * SINHP2+SIGMAP*COSHP1*DEL2))+YP(IM1)*(SINHM2*DEL1-DEL2*(TWO*
     * (COSHP2+ONE)*SINHP1+SIGMAP*COSHP2*DEL1)))/(SIGMAP*SIGMAP*DELS*
     * (SINHMS+SIGMAP*DELS))
      RETURN
      END
dkrvp1.f        496939147   869   730   100755  5998      `
      SUBROUTINE DKRVP1(N, X, Y, XP, YP, TEMP, S, SIGMA, IERR)
C
      INTEGER N, IERR
      DOUBLE PRECISION X(N),Y(N),XP(N),YP(N),TEMP(1),S(N),SIGMA
C*S   REAL X(N), Y(N), XP(N), YP(N), TEMP(1), S(N), SIGMA
C
C                      MODIFIED
C                      FROM THE SPLINE UNDER TENSION PACKAGE
C                       CODED BY A. K. CLINE AND R. J. RENKA
C                            DEPARTMENT OF COMPUTER SCIENCES
C                              UNIVERSITY OF TEXAS AT AUSTIN
C
C                      MODIFICATION IS FOR THE CONTOUR
C                      ANALYSIS PACKAGE CODED BY
C                      RALPH BAKER KEARFOTT, DEPARTMENT
C                      OF MATHEMATICS AND STATISTICS
C                      UNIVERSITY OF SOUTHWESTERN LOUISIANA
C
C THIS SUBROUTINE DETERMINES THE PARAMETERS NECESSARY TO
C COMPUTE A SPLINE UNDER TENSION FORMING A CLOSED CURVE IN
C THE PLANE AND PASSING THROUGH A SEQUENCE OF PAIRS
C (X(1),Y(1)),...,(X(N),Y(N)). FOR ACTUAL COMPUTATION OF
C POINTS ON THE CURVE IT IS NECESSARY TO CALL THE SUBROUTINE
C DKRVP2.
C
C ON INPUT--
C
C   N IS THE NUMBER OF POINTS TO BE INTERPOLATED (N.GE.2).
C
C   X IS AN ARRAY CONTAINING THE N X-COORDINATES OF THE
C   POINTS.
C
C   Y IS AN ARRAY CONTAINING THE N Y-COORDINATES OF THE
C   POINTS. (ADJACENT X-Y PAIRS MUST BE DISTINCT, I. E.
C   EITHER X(I) .NE. X(I+1) OR Y(I) .NE. Y(I+1), FOR
C   I = 1,...,N-1 AND EITHER X(1) .NE. X(N) OR Y(1) .NE. Y(N).)
C
C   XP AND YP ARE ARRAYS OF LENGTH AT LEAST N.
C
C   TEMP IS AN ARRAY OF LENGTH AT LEAST 2*N WHICH IS USED
C   FOR SCRATCH STORAGE.
C
C   S IS AN ARRAY OF LENGTH AT LEAST N.
C
C AND
C
C   SIGMA CONTAINS THE TENSION FACTOR. THIS VALUE INDICATES
C   THE CURVINESS DESIRED. IF ABS(SIGMA) IS NEARLY ZERO
C   (E.G. .001) THE RESULTING CURVE IS APPROXIMATELY A CUBIC
C   SPLINE. IF ABS(SIGMA) IS LARGE (E. G. 50.) THE RESULTING
C   CURVE IS NEARLY A POLYGONAL LINE. IF SIGMA EQUALS ZERO A
C   CUBIC SPLINE RESULTS. A STANDARD VALUE FOR SIGMA IS
C   APPROXIMATELY 1. IN ABSOLUTE VALUE.
C
C ON RETURN--
C
C   XP AND YP CONTAIN INFORMATION ABOUT THE CURVATURE OF THE
C   CURVE AT THE GIVEN NODES.
C
C   S CONTAINS THE POLYGONAL ARCLENGTHS OF THE CURVE.
C
C   IERR CONTAINS AN ERROR FLAG,
C        = 0 FOR NORMAL RETURN,
C        = 1 IF N IS LESS THAN 2,
C        = 2 IF ADJACENT COORDINATE PAIRS COINCIDE.
C
C AND
C
C   N, X, Y, AND SIGMA ARE UNALTERED,
C
C ADDITIONAL NOTES--
C
C   THIS SUBROUTINE REFERENCES MODIFIED SPLINE UNDER TEN-
C   SION PACKAGE MODUULE DTERMS.
C
C   THE FORTRAN ROUTINES ABS, FLOAT, AND SQRT (DABS, DBLE,
C   FLOAT, AND DSQRT FOR DOUBLE PRECISION) ARE CALLED.
C
C-----------------------------------------------------------
C
      DOUBLE PRECISION DBLE, DELS1, DELS2, DIAG, DIAG1, DIAG2,
     *DIAGIN, DX1, DX2, DY1, DY2, SDIAG1, SDIAG2, SIGMAP, DSQRT,
     *XPN, YPN
C*S   REAL DELS1, DELS2, DIAG, DIAG1, DIAG2, DIAGIN, DX1, DX2, DY1,
C*S  * DY2, SDIAG1, SDIAG2, SIGMAP, SQRT, XPN, YPN
C*S   INTEGER I, IBAK, IM1, NM1, NP1, NPI, NPIBAK
C
      DOUBLE PRECISION ZERO,ONE
      DATA ZERO/0.0D0/, ONE/1.0D0/
C*S   REAL ZERO, ONE
C*S   DATA ZERO /0.0E0/, ONE /1.0E0/
      NM1 = N - 1
      NP1 = N + 1
      IERR = 0
      IF (N.LE.1) GO TO 70
C
C DETERMINE POLYGONAL ARCLENGTHS.
C
      S(1) = DSQRT((X(N)-X(1))**2+(Y(N)-Y(1))**2)
C*S   S(1) = SQRT((X(N)-X(1))**2+(Y(N)-Y(1))**2)
      DO 10 I=2,N
        IM1 = I - 1
    1   S(I) = S(IM1)+DSQRT((X(I)-X(IM1))**2+
     *         (Y(I)-Y(IM1))**2)
C*S     S(I) = S(IM1) + SQRT((X(I)-X(IM1))**2+(Y(I)-Y(IM1))**2)
   10 CONTINUE
C
C DENORMALIZE TENSION FACTOR.
C
      SIGMAP = DABS(SIGMA)*DBLE(FLOAT(N))/S(N)
C*S   SIGMAP = ABS(SIGMA)*(FLOAT(N))/S(N)
C
C SET UP RIGHT HAND SIDES OF TRIDIAGONAL (WITH CORNER
C ELEMENTS) LINEAR SYSTEM FOR XP AND YP.
C
      DELS1 = S(1)
      IF (DELS1.EQ.ZERO) GO TO 80
      DX1 = (X(1)-X(N))/DELS1
      DY1 = (Y(1)-Y(N))/DELS1
      CALL DTERMS(DIAG1, SDIAG1, SIGMAP, DELS1)
      DELS2 = S(2) - S(1)
      IF (DELS2.EQ.ZERO) GO TO 80
      DX2 = (X(2)-X(1))/DELS2
      DY2 = (Y(2)-Y(1))/DELS2
      CALL DTERMS(DIAG2, SDIAG2, SIGMAP, DELS2)
      DIAG = DIAG1 + DIAG2
      DIAGIN = ONE/DIAG
      XP(1) = (DX2-DX1)*DIAGIN
      YP(1) = (DY2-DY1)*DIAGIN
      TEMP(NP1) = -SDIAG1*DIAGIN
      TEMP(1) = SDIAG2*DIAGIN
      DX1 = DX2
      DY1 = DY2
      DIAG1 = DIAG2
      SDIAG1 = SDIAG2
      IF (N.EQ.2) GO TO 30
      DO 20 I=2,NM1
        NPI = N + I
        DELS2 = S(I+1) - S(I)
        IF (DELS2.EQ.ZERO) GO TO 80
        DX2 = (X(I+1)-X(I))/DELS2
        DY2 = (Y(I+1)-Y(I))/DELS2
        CALL DTERMS(DIAG2, SDIAG2, SIGMAP, DELS2)
        DIAG = DIAG1 + DIAG2 - SDIAG1*TEMP(I-1)
        DIAGIN = ONE/DIAG
        XP(I) = (DX2-DX1-SDIAG1*XP(I-1))*DIAGIN
        YP(I) = (DY2-DY1-SDIAG1*YP(I-1))*DIAGIN
        TEMP(NPI) = -TEMP(NPI-1)*SDIAG1*DIAGIN
        TEMP(I) = SDIAG2*DIAGIN
        DX1 = DX2
        DY1 = DY2
        DIAG1 = DIAG2
        SDIAG1 = SDIAG2
   20 CONTINUE
   30 DELS2 = S(1)
      DX2 = (X(1)-X(N))/DELS2
      DY2 = (Y(1)-Y(N))/DELS2
      CALL DTERMS(DIAG2, SDIAG2, SIGMAP, DELS2)
      XP(N) = DX2 - DX1
      YP(N) = DY2 - DY1
      TEMP(NM1) = TEMP(2*N-1) - TEMP(NM1)
      IF (N.EQ.2) GO TO 50
C
C PERFORM FIRST STEP OF BACK SUBSTITUTION.
C
      DO 40 I=3,N
        IBAK = NP1 - I
        NPIBAK = N + IBAK
        XP(IBAK) = XP(IBAK) - TEMP(IBAK)*XP(IBAK+1)
        YP(IBAK) = YP(IBAK) - TEMP(IBAK)*YP(IBAK+1)
        TEMP(IBAK) = TEMP(NPIBAK) - TEMP(IBAK)*TEMP(IBAK+1)
   40 CONTINUE
   50 XP(N) = (XP(N)-SDIAG2*XP(1)-SDIAG1*XP(NM1))/(DIAG1+DIAG2+SDIAG2*
     * TEMP(1)+SDIAG1*TEMP(NM1))
      YP(N) = (YP(N)-SDIAG2*YP(1)-SDIAG1*YP(NM1))/(DIAG1+DIAG2+SDIAG2*
     * TEMP(1)+SDIAG1*TEMP(NM1))
C
C PERFORM SECOND STEP OF BACK SUBSTITUTION.
C
      XPN = XP(N)
      YPN = YP(N)
      DO 60 I=1,NM1
        XP(I) = XP(I) + TEMP(I)*XPN
        YP(I) = YP(I) + TEMP(I)*YPN
   60 CONTINUE
      RETURN
C
C TOO FEW POINTS
C
   70 IERR = 1
      RETURN
C
C COINCIDENT ADJACENT POINTS
C
   80 IERR = 2
      RETURN
      END
dkrvp2.f        496939149   869   730   100755  4577      `
      SUBROUTINE DKRVP2(T, XS, YS, N, X, Y, XP, YP, S, SIGMA)
C
      INTEGER N
      DOUBLE PRECISION T,XS,YS,X(N),Y(N),XP(N),YP(N),S(N),SIGMA
C*S   REAL T, XS, YS, X(N), Y(N), XP(N), YP(N), S(N), SIGMA
C
C                      MODIFIED
C                      FROM THE SPLINE UNDER TENSION PACKAGE
C                       CODED BY A. K. CLINE AND R. J. RENKA
C                            DEPARTMENT OF COMPUTER SCIENCES
C                              UNIVERSITY OF TEXAS AT AUSTIN
C
C                      MODIFICATION IS FOR THE CONTOUR
C                      ANALYSIS PACKAGE CODED BY
C                      RALPH BAKER KEARFOTT, DEPARTMENT
C                      OF MATHEMATICS AND STATISTICS
C                      UNIVERSITY OF SOUTHWESTERN LOUISIANA
C
C THIS SUBROUTINE PERFORMS THE MAPPING OF POINTS IN THE
C INTERVAL (0.,1.) ONTO A CLOSED CURVE IN THE PLANE. THE
C SUBROUTINE DKRVP1 SHOULD BE CALLED EARLIER TO DETERMINE
C CERTAIN NECESSARY PARAMETERS. THE RESULTING CURVE HAS A
C PARAMETRIC REPRESENTATION BOTH OF WHOSE COMPONENTS ARE
C PERIODIC SPLINES UNDER TENSION AND FUNCTIONS OF THE POLY-
C GONAL ARCLENGTH PARAMETER.
C
C ON INPUT--
C
C   T CONTAINS A VALUE TO BE MAPPED ONTO THE CURVE. THE
C   INTERVAL (0.,1.) IS MAPPED ONTO THE ENTIRE CLOSED CURVE
C   WITH BOTH 0. AND 1. MAPPING TO (X(1),Y(1)). THE MAPPING
C   IS PERIODIC WITH PERIOD ONE THUS ANY INTERVAL OF THE
C   FORM (TT,TT+1.) MAPS ONTO THE ENTIRE CURVE.
C
C   N CONTAINS THE NUMBER OF POINTS WHICH WERE SPECIFIED
C   TO DETERMINE THE CURVE.
C
C   X AND Y ARE ARRAYS CONTAINING THE X- AND Y-COORDINATES
C   OF THE SPECIFIED POINTS.
C
C   XP AND YP ARE THE ARRAYS OUTPUT FROM DKRVP1 CONTAINING
C   CURVATURE INFORMATION.
C
C   S IS AN ARRAY CONTAINING THE POLYGONAL ARCLENGTHS OF
C   THE CURVE.
C
C AND
C
C   SIGMA CONTAINS THE TENSION FACTOR (ITS SIGN IS IGNORED).
C
C THE PARAMETERS N, X, Y, XP, YP, S AND SIGMA SHOULD
C BE INPUT UNALTERED FROM THE OUTPUT OF DKRVP1.
C
C ON RETURN--
C
C   XS AND YS CONTAIN THE X- AND Y-COORDINATES OF THE IMAGE
C   POINT ON THE CURVE.
C
C   NONE OF THE OTHER INPUT PARAMETERS ARE ALTERED.
C
C
C ADDITIONAL NOTES--
C
C   THE FORTRAN ROUTINES ABS, FLOAT, AND IFIX (DABS, DBLE,
C   FLOAT, IFIX, AND SNGL IN DOUBLE PRECISION) ARE CALLED.
C
C   THIS SUBROUTINE REFERENCES MODIFIED SPLINE UNDER TENSION
C   PACKAGE MODULES INTDVL AND DNHCSH.
C
C-----------------------------------------------------------
C
      DOUBLE PRECISION C1, C2, CI, CIM1, COSHP1, COSHP2, D,
     *DEL1, DEL2, DELP1, DELP2, DELS, DUMMY, SI, SIGMAP,
     *SINHM1, SINHM2, SINHMS, SINHP1, SINHP2, SUMX, SUMY,
     *TN
C*S   REAL C1, C2, CI, CIM1, COSHP1, COSHP2, D, DEL1, DEL2, DELP1,
C*S  * DELP2, DELS, DUMMY, SI, SIGMAP, SINHM1, SINHM2, SINHMS, SINHP1,
C*S  * SINHP2, SUMX, SUMY, TN
      INTEGER I, IM1, INTDVL
C
      DOUBLE PRECISION ZERO,ONE,TWO,SIX
      DATA ZERO/0.0D0/, ONE/1.0D0/, TWO/2.0D0/, SIX/6.0D0/
C*S   REAL ZERO, ONE, TWO, SIX
C*S   DATA ZERO /0.0E0/, ONE /1.0E0/, TWO /2.0E0/, SIX /6.0E0/
C
C DETERMINE INTERVAL.
C
      TN = T-DBLE(FLOAT(IFIX(SNGL(T))))
C*S   TN = T - (FLOAT(IFIX((T))))
      IF (TN.LT.ZERO) TN = TN + ONE
      TN = S(N)*TN + S(1)
      IM1 = N
      IF (TN.LT.S(N)) IM1 = INTDVL(TN,S,N)
      I = IM1 + 1
      IF (I.GT.N) I = 1
C
C DENORMALIZE TENSION FACTOR.
C
      SIGMAP = DABS(SIGMA)*DBLE(FLOAT(N))/S(N)
C*S   SIGMAP = ABS(SIGMA)*(FLOAT(N))/S(N)
C
C SET UP AND PERFORM INTERPOLATION.
C
      SI = S(I)
      IF (IM1.EQ.N) SI = S(N) + S(1)
      DEL1 = TN - S(IM1)
      DEL2 = SI - TN
      DELS = SI - S(IM1)
      SUMX = (X(I)*DEL1+X(IM1)*DEL2)/DELS
      SUMY = (Y(I)*DEL1+Y(IM1)*DEL2)/DELS
      IF (SIGMAP.NE.ZERO) GO TO 10
      D = DEL1*DEL2/(SIX*DELS)
      C1 = (DEL1+DELS)*D
      C2 = (DEL2+DELS)*D
      XS = SUMX - XP(I)*C1 - XP(IM1)*C2
      YS = SUMY - YP(I)*C1 - YP(IM1)*C2
      RETURN
   10 DELP1 = SIGMAP*(DEL1+DELS)/TWO
      DELP2 = SIGMAP*(DEL2+DELS)/TWO
      CALL DNHCSH(SINHM1, DUMMY, SIGMAP*DEL1, -1)
      CALL DNHCSH(SINHM2, DUMMY, SIGMAP*DEL2, -1)
      CALL DNHCSH(SINHMS, DUMMY, SIGMAP*DELS, -1)
      CALL DNHCSH(SINHP1, DUMMY, SIGMAP*DEL1/TWO, -1)
      CALL DNHCSH(SINHP2, DUMMY, SIGMAP*DEL2/TWO, -1)
      CALL DNHCSH(DUMMY, COSHP1, DELP1, 1)
      CALL DNHCSH(DUMMY, COSHP2, DELP2, 1)
      D = SIGMAP*SIGMAP*DELS*(SINHMS+SIGMAP*DELS)
      CI = (SINHM1*DEL2-DEL1*(TWO*(COSHP1+ONE)*SINHP2+SIGMAP*COSHP1*
     * DEL2))/D
      CIM1 = (SINHM2*DEL1-DEL2*(TWO*(COSHP2+ONE)*SINHP1+SIGMAP*COSHP2*
     * DEL1))/D
      XS = SUMX + CI*XP(I) + CIM1*XP(IM1)
      YS = SUMY + CI*YP(I) + CIM1*YP(IM1)
      RETURN
      END

dnhcsh.f        496939150   869   730   100755  4579      `
      SUBROUTINE DNHCSH(SINHM, COSHM, X, ISW)
C
      INTEGER ISW
      DOUBLE PRECISION SINHM,COSHM,X
C*S   REAL SINHM, COSHM, X
C
C                      MODIFIED
C                      FROM THE SPLINE UNDER TENSION PACKAGE
C                       CODED BY A. K. CLINE AND R. J. RENKA
C                            DEPARTMENT OF COMPUTER SCIENCES
C                              UNIVERSITY OF TEXAS AT AUSTIN
C
C                      MODIFICATION IS FOR THE CONTOUR
C                      ANALYSIS PACKAGE CODED BY
C                      RALPH BAKER KEARFOTT, DEPARTMENT
C                      OF MATHEMATICS AND STATISTICS
C                      UNIVERSITY OF SOUTHWESTERN LOUISIANA
C
C THIS SUBROUTINE RETURNS APPROXIMATIONS TO
C       SINHM(X) = SINH(X)-X
C       COSHM(X) = COSH(X)-1
C AND
C       COSHMM(X) = COSH(X)-1-X*X/2
C WITH RELATIVE ERROR LESS THAN 3.42D-14
C
C ON INPUT--
C
C   X CONTAINS THE VALUE OF THE INDEPENDENT VARIABLE.
C
C   ISW INDICATES THE FUNCTION DESIRED
C           = -1 IF ONLY SINHM IS DESIRED,
C           =  0 IF BOTH SINHM AND COSHM ARE DESIRED,
C           =  1 IF ONLY COSHM IS DESIRED,
C           =  2 IF ONLY COSHMM IS DESIRED,
C           =  3 IF BOTH SINHM AND COSHMM ARE DESIRED.
C
C ON RETURN--
C
C   SINHM CONTAINS THE VALUE OF SINHM(X) IF ISW .LE. 0 OR
C   ISW .EQ. 3 (SINHM IS UNALTERED IF ISW .EQ.1 OR ISW .EQ.
C   2).
C
C   COSHM CONTAINS THE VALUE OF COSHM(X) IF ISW .EQ. 0 OR
C   ISW .EQ. 1 AND CONTAINS THE VALUE OF COSHMM(X) IF ISW
C   .GE. 2 (COSHM IS UNALTERED IF ISW .EQ. -1).
C
C AND
C
C   X AND ISW ARE UNALTERED.
C
C ADDITIONAL NOTES--
C
C   THE FORTRAN ROUTINES ABS AND EXP (DABS AND DEXP FOR
C   DOUBLE PRECISION) ARE CALLED.
C
C-----------------------------------------------------------
C
      DOUBLE PRECISION AX, CP1, CP2, CP3, CP4, CQ1, EXPX, SP1, SP2,
     *SP3, SP4, SQ1, XS, XX, ZP1, ZP2, ZP3, ZQ1, ZQ2, ZQ3, ZQ4
      DOUBLE PRECISION ZERO,ONE,TWO,SIX,TWOP7,ONEP15,TWENT4
      DATA ZERO,ONE,TWO,SIX,TWOP7,ONEP15,TWENT4
     */0.0D0,1.0D0,2.0D0,6.0D0,2.7D0,1.15D0,24.D0/
      DATA SP4/4.50217693381333D-08/,
     *     SP3/8.95278544216390D-06/,
     *     SP2/8.72048976791502D-04/,
     *     SP1/4.36314556981690D-02/,
     *     SQ1/-6.36854430175110D-03/
      DATA CP4/1.78419567490190D-07/,
     *     CP3/2.87277229799044D-05/,
     *     CP2/2.15151519902028D-03/,
     *     CP1/7.58181822756256D-02/,
     *     CQ1/-7.51515105679867D-03/
      DATA ZP3/5.59297116264720D-07/,
     *     ZP2/1.77943488030894D-04/,
     *     ZP1/1.69800461894792D-02/,
     *     ZQ4/1.33412535492375D-09/,
     *     ZQ3/-5.80858944138663D-07/,
     *     ZQ2/1.27814964403863D-04/,
     *     ZQ1/-1.63532871439181D-02/
C*S   REAL AX, CP1, CP2, CP3, CP4, CQ1, EXPX, SP1, SP2, SP3, SP4, SQ1,
C*S  * XS, XX, ZP1, ZP2, ZP3, ZQ1, ZQ2, ZQ3, ZQ4
C*S   REAL ZERO, ONE, TWO, SIX, TWOP7, ONEP15, TWENT4
C*S   DATA ZERO, ONE, TWO, SIX, TWOP7, ONEP15, TWENT4
C*S  * /0.0E0,1.0E0,2.0E0,6.0E0,2.7E0,1.15E0,24.E0/
C*S   DATA SP4 /4.50217693381333E-08/, SP3 /8.95278544216390E-06/, SP2
C*S  * /8.72048976791502E-04/, SP1 /4.36314556981690E-02/, SQ1
C*S  * /-6.36854430175110E-03/
C*S   DATA CP4 /1.78419567490190E-07/, CP3 /2.87277229799044E-05/, CP2
C*S  * /2.15151519902028E-03/, CP1 /7.58181822756256E-02/, CQ1
C*S  * /-7.51515105679867E-03/
C*S   DATA ZP3 /5.59297116264720E-07/, ZP2 /1.77943488030894E-04/, ZP1
C*S  * /1.69800461894792E-02/, ZQ4 /1.33412535492375E-09/, ZQ3
C*S  * /-5.80858944138663E-07/, ZQ2 /1.27814964403863E-04/, ZQ1
C*S  * /-1.63532871439181E-02/
      XX = X
      AX = DABS(XX)
C*S   AX = ABS(XX)
      XS = XX*XX
      IF ((AX .GE. TWOP7) .OR. (AX .GE. ONEP15 .AND.
     *     ISW .NE. 2)) EXPX = DEXP(AX)
C*S   IF ((AX.GE.TWOP7) .OR. (AX.GE.ONEP15 .AND. ISW.NE.2)) EXPX =
C*S  * EXP(AX)
C
C SINHM APPROXIMATION
C
      IF (ISW.EQ.1 .OR. ISW.EQ.2) GO TO 20
      IF (AX.GE.ONEP15) GO TO 10
      SINHM = (((((SP4*XS+SP3)*XS+SP2)*XS+SP1)*XS+ONE)*XS*XX)/((SQ1*
     * XS+ONE)*SIX)
      GO TO 20
   10 SINHM = -(((ONE/EXPX+AX)+AX)-EXPX)/TWO
      IF (XX.LT.ZERO) SINHM = -SINHM
C
C COSHM APPROXIMATION
C
   20 IF (ISW.NE.0 .AND. ISW.NE.1) GO TO 40
      IF (AX.GE.ONEP15) GO TO 30
      COSHM = (((((CP4*XS+CP3)*XS+CP2)*XS+CP1)*XS+ONE)*XS)/((CQ1*XS+ONE)
     * *TWO)
      GO TO 40
   30 COSHM = ((ONE/EXPX-TWO)+EXPX)/TWO
C
C COSHMM APPROXIMATION
C
   40 IF (ISW.LE.1) RETURN
      IF (AX.GE.TWOP7) GO TO 50
      COSHM = ((((ZP3*XS+ZP2)*XS+ZP1)*XS+ONE)*XS*XS)/(((((ZQ4*XS+ZQ3)*
     * XS+ZQ2)*XS+ZQ1)*XS+ONE)*TWENT4)
      RETURN
   50 COSHM = (((ONE/EXPX-TWO)-XS)+EXPX)/TWO
      RETURN
      END

dterms.f        496939152   869   730   100755  1712      `
      SUBROUTINE DTERMS(DIAG, SDIAG, SIGMA, DEL)
C
      DOUBLE PRECISION DIAG,SDIAG,SIGMA,DEL
C*S   REAL DIAG, SDIAG, SIGMA, DEL
C
C                      MODIFIED FROM THE SPLINE UNDER TENSION PACKAGE
C                       CODED BY A. K. CLINE AND R. J. RENKA
C                            DEPARTMENT OF COMPUTER SCIENCES
C                              UNIVERSITY OF TEXAS AT AUSTIN
C
C  THIS IS A MODIFIED DOUBLE PRECISION VERSION.
C
C THIS SUBROUTINE COMPUTES THE DIAGONAL AND SUPERDIAGONAL
C TERMS OF THE TRIDIAGONAL LINEAR SYSTEM ASSOCIATED WITH
C SPLINE UNDER TENSION INTERPOLATION.
C
C ON INPUT--
C
C   SIGMA CONTAINS THE TENSION FACTOR.
C
C AND
C
C   DEL CONTAINS THE STEP SIZE.
C
C ON RETURN--
C
C               (SIGMA*DEL*COSH(SIGMA*DEL) - SINH(SIGMA*DEL)
C   DIAG = DEL*--------------------------------------------.
C                     (SIGMA*DEL)**2 * SINH(SIGMA*DEL)
C
C                   SINH(SIGMA*DEL) - SIGMA*DEL
C   SDIAG = DEL*----------------------------------.
C                (SIGMA*DEL)**2 * SINH(SIGMA*DEL)
C
C AND
C
C   SIGMA AND DEL ARE UNALTERED.
C
C THIS SUBROUTINE REFERENCES PACKAGE MODULE DNHCSH.
C
C-----------------------------------------------------------
C
      DOUBLE PRECISION COSHM, DENOM, SIGDEL, SINHM
C*S   REAL COSHM, DENOM, SIGDEL, SINHM
C
      DOUBLE PRECISION THREE,SIX
      DATA THREE,SIX/3.0D0,6.0D0/
C*S   REAL THREE, SIX
C*S   DATA THREE, SIX /3.0E0,6.0E0/
C
      IF (SIGMA.NE.0.) GO TO 10
      DIAG = DEL/THREE
      SDIAG = DEL/SIX
      RETURN
   10 SIGDEL = SIGMA*DEL
      CALL DNHCSH(SINHM, COSHM, SIGDEL, 0)
      DENOM = DEL/((SINHM+SIGDEL)*SIGDEL*SIGDEL)
      DIAG = DENOM*(SIGDEL*COSHM-SINHM)
      SDIAG = DENOM*SINHM
      RETURN
      END
intdvl.f        496939153   869   730   100755  2074      `
      INTEGER FUNCTION INTDVL(T, X, N)
C
      INTEGER N
      DOUBLE PRECISION T,X(N)
C*S   REAL T, X(N)
C
C                      MODIFIED
C                      FROM THE SPLINE UNDER TENSION PACKAGE
C                       CODED BY A. K. CLINE AND R. J. RENKA
C                            DEPARTMENT OF COMPUTER SCIENCES
C                              UNIVERSITY OF TEXAS AT AUSTIN
C
C                      MODIFICATION IS FOR THE CONTOUR
C                      ANALYSIS PACKAGE CODED BY
C                      RALPH BAKER KEARFOTT, DEPARTMENT
C                      OF MATHEMATICS AND STATISTICS
C                      UNIVERSITY OF SOUTHWESTERN LOUISIANA
C
C THIS FUNCTION DETERMINES THE INDEX OF THE INTERVAL
C (DETERMINED BY A GIVEN INCREASING SEQUENCE) IN WHICH
C A GIVEN VALUE LIES.
C
C ON INPUT--
C
C   T IS THE GIVEN VALUE.
C
C   X IS A VECTOR OF STRICTLY INCREASING VALUES.
C
C AND
C
C   N IS THE LENGTH OF X (N .GE. 2).
C
C ON RETURN--
C
C   INTDVL RETURNS AN INTEGER I SUCH THAT
C
C          I = 1       IF             T .LE. X(2)  ,
C          I = N-1     IF X(N-1) .LE. T            ,
C          OTHERWISE       X(I)  .LE. T .LE. X(I+1),
C
C   NONE OF THE INPUT PARAMETERS ARE ALTERED.
C
C ADDITIONAL NOTE--
C
C   THE FORTRAN ROUTINES FLOAT, IFIX, AND MIN0 (DBLE, FLOAT,
C   IFIX, MIN0, AND SNGL FOR DOUBLE PRECISION) ARE CALLED.
C
C-----------------------------------------------------------
C
      DOUBLE PRECISION TT
C*S   REAL TT
      INTEGER I, IH, IL
C
      TT = T
      IF (TT.LE.X(2)) GO TO 40
      IF (TT.GE.X(N-1)) GO TO 50
      IL = 2
      IH = N - 1
C
C LINEAR INTERPOLATION.
C
  10  I = MIN0(IL+IFIX(SNGL(DBLE(FLOAT(IH-IL))*(TT-X(IL))
     */(X(IH)-X(IL)))),
     *         IH-1)
C*S10 I = MIN0(IL+IFIX(((FLOAT(IH-IL))*(TT-X(IL))/(X(IH)-X(IL)))),IH-1)
      IF (TT.LT.X(I)) GO TO 20
      IF (TT.LE.X(I+1)) GO TO 30
C
C TOO HIGH
C
      IL = I + 1
      GO TO 10
C
C TOO LOW
C
   20 IH = I
      GO TO 10
   30 INTDVL = I
      RETURN
C
C LEFT END
C
   40 INTDVL = 1
      RETURN
C
C RIGHT END
C
   50 INTDVL = N - 1
      RETURN
      END
intdvp.f        496939154   869   730   100755  2583      `
      INTEGER FUNCTION INTDVP(T, X, N, P, TP)
C
      INTEGER N
      DOUBLE PRECISION T,X(N),P,TP
C*S   REAL T, X(N), P, TP
C
C                      MODIFIED
C                      FROM THE SPLINE UNDER TENSION PACKAGE
C                    CODED BY A. K. CLINE AND S. E. GALINSKY
C                            DEPARTMENT OF COMPUTER SCIENCES
C                              UNIVERSITY OF TEXAS AT AUSTIN
C
C                      MODIFICATION IS FOR THE CONTOUR
C                      ANALYSIS PACKAGE CODED BY
C                      RALPH BAKER KEARFOTT, DEPARTMENT
C                      OF MATHEMATICS AND STATISTICS
C                      UNIVERSITY OF SOUTHWESTERN LOUISIANA
C
C THIS FUNCTION DETERMINES THE INDEX OF THE INTERVAL
C (DETERMINED BY A GIVEN INCREASING SEQUENCE) IN WHICH A
C GIVEN VALUE LIES, AFTER TRANSLATING THE VALUE TO WITHIN
C THE CORRECT PERIOD.  IT ALSO RETURNS THIS TRANSLATED VALUE.
C
C ON INPUT--
C
C   T IS THE GIVEN VALUE.
C
C   X IS A VECTOR OF STRICTLY INCREASING VALUES.
C
C   N IS THE LENGTH OF X (N .GE. 2).
C
C AND
C
C   P CONTAINS THE PERIOD.
C
C ON RETURN--
C
C   TP CONTAINS A TRANSLATED VALUE OF T (I. E. X(1) .LE. TP,
C   TP .LT. X(1)+P, AND TP = T + K*P FOR SOME INTEGER K).
C
C   INTDVL RETURNS AN INTEGER I SUCH THAT
C
C          I = 1       IF             TP .LE. X(2)  ,
C          I = N       IF   X(N) .LE. TP            ,
C          OTHERWISE       X(I)  .LE. TP .LE. X(I+1),
C
C   NONE OF THE OTHER INPUT PARAMETERS ARE ALTERED.
C
C ADDITIONAL NOTE--
C
C   THE FORTRAN ROUTINES AMAX1, AMIN1, FLOAT, IFIX, AND INT
C   (DBLE, DMAX1, DMIN1, FLOAT, IFIX, INT, AND SNGL FOR
C   DOUBLE PRECISION) ARE CALLED.
C
C-----------------------------------------------------------
C
      DOUBLE PRECISION TT
C*S   REAL TT
      INTEGER I, IH, IL, NPER
C
      NPER = INT(SNGL((T-X(1))/P))
C*S   NPER = INT(((T-X(1))/P))
      IF (T.LT.X(1)) NPER = NPER - 1
      TP = T-DBLE(FLOAT(NPER))*P
      TP = DMIN1(X(1)+P,DMAX1(X(1),TP))
C*S   TP = T - (FLOAT(NPER))*P
C*S   TP = AMIN1(X(1)+P,AMAX1(X(1),TP))
      TT = TP
      IF (TT.LE.X(2)) GO TO 40
      IF (TT.GE.X(N)) GO TO 50
      IL = 2
      IH = N
C
C LINEAR INTERPOLATION
C
10    I = IL+IFIX(SNGL(DBLE(FLOAT(IH-IL))*(TT-X(IL))/(X(IH)-X(IL))))
C*S 10 I = IL + IFIX(((FLOAT(IH-IL))*(TT-X(IL))/(X(IH)-X(IL))))
      IF (TT.LT.X(I)) GO TO 20
      IF (TT.LE.X(I+1)) GO TO 30
C
C TOO HIGH
C
      IL = I + 1
      GO TO 10
C
C TOO LOW
C
   20 IH = I
      GO TO 10
   30 INTDVP = I
      RETURN
C
C LEFT END
C
   40 INTDVP = 1
      RETURN
C
C RIGHT END
C
   50 INTDVP = N
      RETURN
      END

interv.f        714145646   2016  2016  100755  3806      `
      SUBROUTINE INTERV ( XT, LXT, X, LEFT, MFLAG )
COMPUTES  LEFT = MAX( I , 1 .LE. I .LE. LXT  .AND.  XT(I) .LE. X )  .
C
C******  I N P U T  ******
C  XT.....A REAL SEQUENCE, OF LENGTH  LXT , ASSUMED TO BE NONDECREASING
C  LXT.....NUMBER OF TERMS IN THE SEQUENCE  XT .
C  X.....THE POINT WHOSE LOCATION WITH RESPECT TO THE SEQUENCE  XT  IS
C        TO BE DETERMINED.
C
C******  O U T P U T  ******
C  LEFT, MFLAG.....BOTH INTERGERS, WHOSE VALUE IS
C
C   1     -1      IF                X .LT.  XT(1)
C   I      0      IF    XT(I)  .LE. X .LT. XT(I+1)
C  LXT     1      IF   XT(LXT) .LE. X
C
C        IN PARTICULAR,  MFLAG = 0 IS THE 'USUAL' CASE.  MFLAG .NE. 0
C        INDICATES THAT  X  LIES OUTSIDE THE HALFOPEN INTERVAL
C        XT(1) .LE. Y .LT. XT(LXT) . THE ASYMMETRIC TREATMENT OF THE
C        INTERVAL IS DUE TO THE DECISION TO MAKE ALL PP FUNCTIONS CONT-
C        INUOUS FROM THE RIGHT.
C
C******  M E T H O D  ******
C  THE PROGRAM IS DESIGNED TO BE EFFICIENT IN THE COMMON SITUATION THAT
C  IT IS CALLED REPEATEDLY, WITH  X  TAKEN FROM AN INCREASING OR DECREA-
C  SING SEQUENCE. THIS WILL HAPPEN, E.G., WHEN A PP FUNCTION IS TO BE
C  GRAPHED. THE FIRST GUESS FOR  LEFT  IS THEREFORE TAKEN TO BE THE VAL-
C  UE RETURNED AT THE PREVIOUS CALL AND STORED IN THE  L O C A L  VARIA-
C  BLE  ILO . A FIRST CHECK ASCERTAINS THAT  ILO .LT. LXT (THIS IS NEC-
C  ESSARY SINCE THE PRESENT CALL MAY HAVE NOTHING TO DO WITH THE PREVI-
C  OUS CALL). THEN, IF  XT(ILO) .LE. X .LT. XT(ILO+1), WE SET  LEFT =
C  ILO  AND ARE DONE AFTER JUST THREE COMPARISONS.
C     OTHERWISE, WE REPEATEDLY DOUBLE THE DIFFERENCE  ISTEP = IHI - ILO
C  WHILE ALSO MOVING  ILO  AND  IHI  IN THE DIRECTION OF  X , UNTIL
C                      XT(ILO) .LE. X.LT. XT(IHI) ,
C  AFTER WHICH WE USE BISECTION TO GET, IN ADDITION, ILO+1 = IHI .
C  LEFT = ILO  IS THEN RETURNED.
C
      INTEGER LEFT,LXT,MFLAG,   IHI,ILO,ISTEP,MIDDLE
      REAL*8 X,XT(LXT)
      DATA ILO /1/
C     SAVE ILO  (A VALID FORTRAN STATEMENT IN THE NEW 1977 STANDARD)
      IHI = ILO + 1
      IF (IHI .LT. LXT)                 GO TO 20
         IF (X .GE. XT(LXT))            GO TO 110
         IF (LXT .LE. 1)                GO TO 90
         ILO = LXT - 1
         IHI = LXT
C
   20 IF (X .GE. XT(IHI))               GO TO 40
      IF (X .GE. XT(ILO))               GO TO 100
C
C              **** NOW X .LT. XT(ILO) . DECREASE  ILO  TO CAPTURE  X .
      ISTEP = 1
   31    IHI = ILO
         ILO = IHI - ISTEP
         IF (ILO .LE. 1)                GO TO 35
         IF (X .GE. XT(ILO))            GO TO 50
         ISTEP = ISTEP*2
                                        GO TO 31
   35 ILO = 1
      IF (X .LT. XT(1))                 GO TO 90
                                        GO TO 50
C              **** NOW X .GE. XT(IHI) . INCREASE  IHI  TO CAPTURE  X .
   40 ISTEP = 1
   41    ILO = IHI
         IHI = ILO + ISTEP
         IF (IHI .GE. LXT)              GO TO 45
         IF (X .LT. XT(IHI))            GO TO 50
         ISTEP = ISTEP*2
                                        GO TO 41
   45 IF (X .GE. XT(LXT))               GO TO 110
      IHI = LXT
C
C           **** NOW XT(ILO) .LE. X .LT. XT(IHI) . NARROW THE INTERVAL.
   50 MIDDLE = (ILO + IHI)/2
      IF (MIDDLE .EQ. ILO)              GO TO 100
C     NOTE. IT IS ASSUMED THAT MIDDLE = ILO IN CASE IHI = ILO+1 .
      IF (X .LT. XT(MIDDLE))            GO TO 53
         ILO = MIDDLE
                                        GO TO 50
   53    IHI = MIDDLE
                                        GO TO 50
C**** SET OUTPUT AND RETURN.
   90 MFLAG = -1
      LEFT = 1
                                        RETURN
  100 MFLAG = 0
      LEFT = ILO
                                        RETURN
  110 MFLAG = 1
      LEFT = LXT
                                        RETURN
      END
l2appr.f        496939157   869   730   100755  3709      `
	SUBROUTINE L2APPR ( T, N, K, NTAU, TAU, GTAU, WEIGHT, 
     &          Q, DIAG, BCOEF )
C
CALLS SUBROUTINES BSPLVB, BCHFAC/SLV
C
CONSTRUCTS THE (WEIGHTED DISCRETE) L2-APPROXIMATION BY SPLINES OF ORDER
C  K WITH KNOT SEQUENCE T(1), .., T(N+K) TO GIVEN DATA POINTS
C  (TAU(I),GTAU(I)), I=1,...,NTAU. THE B-SPLINE COEFFICIENTS
C   B C O E F  OF THE APPROXIMATING SPLINE ARE DETERMINED FROM THE
C  NORMAL EQUATIONS USING CHOLESKY'S METHOD.
C
C***** I N P U T *****
C  T(1),...T(N+K)  THE KNOT SEQUENCE
C  N -- THE DIMENSION OF THE SPACE OF SPLINES OF ORDER K WITH KNOTS T.
C  K -- THE ORDER
C  NTAU -- NUMBER OF DATA POINTS
C  (TAU(I),GTAU(I)), I=1,...,NTAU ARE THE NTAU DATA POINTS TO BE
C  	FITTED.
C  WEIGHT(I), I=1,...,NTAU ARE THE CORRESPONDING WEIGHTS.
C
C  W A R N I N G   -- THE RESTRICTION K .LE. KMAX (=20) IS IMPOSED
C  	BY THE ARBITRARY DIMENSION STATEMENT FOR BIATX BELOW, BUT IS
C	 N O W H E R E   C H E C K E D  FOR.
C
C***** W O R K   A R R A Y S ******
C  Q -- A WORK ARRAY OF SIZE (AT LEAST) K*N. iTS FIRST K ROWS ARE USED
C       FOR THE K LOWER DIAGONALS OF THE GRAMIAN MATRIX  C .
C  DIAG -- A WORK ARRAY OF LENGTH N USED IN BCHFAC.
C
C***** O U T P U T *****
C  BCOEF(1),...,BCOEF(N) THE B-SPLINE COEFFS. OF THE L2-APPR.
C
C***** M E T H O D *****
C  THE B-SPLINE COEFFICIENTS OF THE L2-APPR. ARE DETERMINED AS THE 
C  SOLUTION OF THE NORMAL EQUATIONS
C	SUM ((B(I),B(J))*BCOEF(J) : J=1,...N) = (B(I),G), I=1,...,N.
C
C  HERE, B(I) DENOTS THE I-TH B-SPLINE, G DENOTES THE FUNCTION TO
C  BE APPROXIMATED, AND THE INNER PRODUCT OF TWO FUNCTIONS F AND G
C  IS GIVEN BY
C     (F,G) := SUM (F(TAU(I))*G(TAU(I))*WEIGHT(I) : I=1,...,NTAU) .
C  THE RELEVANT FUNCTION VALUES OF THE B-SPLINES B(I), I=1,...,N, ARE
C  SUPPLIED BY THE SUBPROGRAM  BSPLVB .
C    THE COEFF. MATRIX C , WITH
C	C(I,J) := (B(I),B(J)), I,J=1,...,N,
C  OF THE NORMAL EQUATIONS IS SYMMETRIC AND (2*K-1)-BANDED, THEREFORE
C  CAN BE SPECIFIED BY GIVING ITS K BANDS AT OR BELOW THE DIAGONAL. FOR
C  I=1,...,N , WE STORE
C    (B(I),B(J)) = C(I,J) IN Q(I-J+1,J), J = I,...,MIN0(I+K-1,N)
C  AND THE RIGHT SIDE
C    (B(I),G) IN BCOEF(I).
C  SINCE B-SPLINE VALUES ARE MOST EFFICIENTLY GENERATED BY FINDING
C  SIMULANEOUSLY THE VALUE OF EVERY NONZERO B-SPLINE AT ONE POINT,
C  THE ENTRIES OF C (I.E., OF Q), ARE GENERATED BY COMPUTING, FOR
C  EACH LL, ALL THE TERMS INVOLVING TAU(LL) SIMULTANEOUSLY AND ADDING
C  THEM TO ALL RELEVANT ENTRIES.
C
	PARAMETER (KMAX=20)
	INTEGER K,N,I,J,JJ,LEFT,LEFTMK,LL,MM,NTAU
	REAL*8 BCOEF(N),DIAG(N),Q(K,N),T(1),BIATX(KMAX),DW
     &	,TAU(NTAU),GTAU(NTAU),WEIGHT(NTAU)
C
C	DIMENSION T(N+K)
C
	DO 7 J=1,N
	  BCOEF(J) = 0.
	  DO 7 I=1,K
7	    Q(I,J) = 0.
	LEFT = K
	LEFTMK = 0
	DO 20 LL=1,NTAU
C		LOCATE LEFT S.T. TAU(LL) IN (T(LEFT),T(LEFT+1))
10	  IF (LEFT .EQ. N) GO TO 15
	  IF (TAU(LL) .LT. T(LEFT+1)) GO TO 15
	  LEFT = LEFT+1
	  LEFTMK = LEFTMK + 1
	  GO TO 10
C
15	  CALL BSPLVB (T,K,1,TAU(LL),LEFT,BIATX)
C
C	BIATX(MM) CONTAINS THE VALUE OF B(LEFT-K+MM) AT TAU(LL).
C	HENCE, WITH DW := BIATX(MM)*WEIGHT(LL), THE NUMBER DW*GTAU(LL)
C	IS A SUMMAND IN THE INNER PRODUCT
C	  (B(LEFT-K+MM),G) WHICH GOES INTO BCOEF(LEFT-K+MM)
C	AND THE NUMBER BIATX(JJ)*DW IS A SUMMAND IN THE INNER PRODUCT
C	  (B(LEFT-K+JJ),B(LEFT-K+MM)), INTO Q(JJ-MM+1,LEFT-K+MM)
C	SINCE (LEFT-K+JJ) - (LEFT-K+MM) + 1 = JJ - MM + 1 .
C
	  DO 20 MM=1,K
	    DW = BIATX(MM)*WEIGHT(LL)
	    J = LEFTMK + MM
	    BCOEF(J) = DW*GTAU(LL) + BCOEF(J)
	    I = 1
	    DO 20 JJ = MM,K
	    	Q(I,J) = BIATX(JJ)*DW + Q(I,J)
20		I=I+1
C
C	CONSTRUCT CHOLESKY FACTORIZATION FOR C IN Q, THEN USE
C	IT TO SOLVE THE NORMAL EQUATIONS
C	  C*X = BCOEF
C	FOR X , AND STORE X IN BCOEF .
C
	CALL BCHFAC (Q,K,N,DIAG)
	CALL BCHSLV (Q,K,N,BCOEF)
	RETURN
	END

newnot.f        496939158   869   730   100755  3846      `
	SUBROUTINE NEWNOT (BREAK,COEF,L,K,BRKNEW,LNEW,COEFG)
C
C  RETURNS LNEW+1 KNOTS IN BRKNEW WHICH ARE EQUIDISTRIBUTED ON (A,B)
C  = (BREAK(1),BREAK(L+1)) WRTO A CERTAIN MONOTONE FCTN G RELATED TO
C  THE K-TH ROOT OF THE K-TH DERIVATIVE OF THE PP FUNCTION F WHOSE PP-
C  REPRESENTATION IS CONTAINED IN BREAK, COEF, L, K .
C
C***** I N P U T *****
C  BREAK, COEF, L, K -- CONTAINS THE PP-REPRESENTATION OF A CERTAIN
C	FUNCTION F OF ORDER K . sPECIFICALLY,
C	D**(K-1) F(X) = COEF(K,I) FOR BREAK(I) .LE. X .LT. BREAK(I+1)
C  LNEW -- NUMBER OF INTERVALS INTO WHICH THE INTERVAL (A,B) IS TO BE
C	SECTIONED BY THE NEW BREAKPOINT SEQUENCE BRKNEW .
C
C***** O U T P U T *****
C  BRKNEW -- ARRAY OF LENGTH LNEW+1 CONTAINING THE NEW BREAKPOINT 
C	SEQUENCE
C  COEFG -- THE COEFFICIENT PART OF THE PP-REPR. BREAK, COEFG, L, 2
C	FOR THE MONOTONE P.LINEAR FUNCTION  G  WRTO WHICH BRKNEW WILL
C	BE EQUIDISTRIBUTED.
C
C***** OPTIONAL PRINTED OUTPUT *****
C  COEFG -- THE PP COEFFS OF G ARE PRINTED OUT IF IPRINT IS SET
C	.GT. 0 IN DATA STATEMENT BELOW.
C
C***** M E T H O D *****
C    THE K-TH DERIVATIVE OF THE GIVEN PP FUNCTION F DOES NOT EXIST
C  (EXCEPT PERHAPS AS A LINEAR COMBINATION OF DELTA FUNCTIONS). NEVER-
C  THELESS, WE CONSTRUCT A P.CONSTANT FUNCTION H WITH BREAKPOINT 
C  SEQUENCE BREAK WHICH IS APPROXIMATELY PROPORTIONAL TO ABS(D**K(F)).
C  SPECIFICALLY, ON (BREAK(I),BREAK(I+1)),
C
C      ABS(JUMP AT BREAK(I) OF PC)   ABS(JUMP AT BREAK(I+1) OF PC)
C H = ---------------------------- + -----------------------------
C       BREAK(I+1) - BREAK(I-1)         BREAK(I+2) - BREAK(I)
C
C  WITH PC THE P.CONSTANT (K-1)ST DERIVATIVE OF F.
C 	THEN, THE P.LINEAR FUNCTION G IS CONSTRUCTED AS
C
C    G(X) = INTEGRAL OF H(Y)**(1/K) FOR Y FROM A TO X
C
C  AND ITS PP COEFFS. STORED IN COEFG .
C	THEN BRKNEW IS DETERMINED BY
C
C	BRKNEW(I) = G**(-1)((I-1)*STEP), I=1,...,LNEW+1
C
C  WHERE STEP = G(B)/LNEW AND (A,B) = (BREAK(1),BREAK(L+1)) .
C    IN THE EVENT THAT PC = D**(K-1)(F) IS CONSTANT IN (A,B) AND
C  THEREFORE H = 0 IDENTICALLY, BRKNEW IS CHOSEN UNIFORMLY SPACED.
C
	INTEGER K,L,LNEW, I,IPRINT,J
	REAL*8 BREAK(1),BRKNEW(1),COEF(K,L),COEFG(2,L)
     *  	,DIF,DIFPRV,ONEOVK,STEP,STEPI
C
C       DIMENSION BREAK(L+1),BRKNEW(LNEW+1)
C
	DATA IPRINT /0/
C
	BRKNEW(1) = BREAK(1)
	BRKNEW(LNEW+1) = BREAK(L+1)
C
C		IF G IS CONSTANT, BRKNEW IS UNIFORM.
	IF (L .LE. 1) GO TO 90
C
C		CONSTRUCT THE CONTINUOUS P.LINEAR FUNCTION G .
	ONEOVK = 1.0D0/DFLOAT(K)
	COEFG(1,1) = 0.
	DIFPRV = ABS(COEF(K,2)-COEF(K,1))/(BREAK(3)-BREAK(1))
	DO 10 I=2,L
	  DIF = ABS(COEF(K,I)-COEF(K,I-1))/(BREAK(I+1)-BREAK(I-1))
	  COEFG(2,I-1) = (DIF+DIFPRV)**ONEOVK
	  COEFG(1,I) = COEFG(1,I-1)+COEFG(2,I-1)*(BREAK(I)-BREAK(I-1))
10	DIFPRV=DIF
	COEFG(2,L) = (2.0D0*DIFPRV)**ONEOVK
C
C					STEP = G(B) / LNEW
	STEP = (COEFG(1,L)+COEFG(2,L)*(BREAK(L+1)-BREAK(L)))/DFLOAT(LNEW)
C
	IF (IPRINT .GT. 0) PRINT 600,STEP,(I,COEFG(1,I),COEFG(2,I),I=1,L)
600	FORMAT(7H STEP =,E16.7/(I5,2E16.5))
C
C		IF G IS CONSTANT, BRKNEW IS UNIFORM .
	IF (STEP .LE. 0.) GO TO 90
C
C	 FOR I=2,...,LNEW, CONSTRUCT BRKNEW(I) = G**(-1)(STEPI),
C	 WITH STEPI = (I-1)*STEP . tHIS REQUIRES INVERSION OF THE
C	 P.LINEAR FUNCTION G . fOR THIS, J IS FOUND SO THAT
C		G(BREAK(J)) .LE. STEPI .LE. G(BREAK(J+1))
C	 AND THEN
C	    	BRKNEW(I) = BREAK(J) + (STEPI-G(BREAK(J)))/DG(BREAK(J)) .
C 	 THE MIDPOINT IS CHOSEN IF DG(BREAK(J)) = 0 .
C
	J = 1
	DO 30 I=2,LNEW
	  STEPI = DFLOAT(I-1)*STEP
21	    IF (J .EQ. L) GO TO 27
	    IF (STEPI .LE. COEFG(1,J+1)) GO TO 27
	    J = J+1
	    GO TO 21
27	  IF (COEFG(2,J) .EQ. 0.) GO TO 29
	    BRKNEW(I) = BREAK(J)+(STEPI-COEFG(1,J))/COEFG(2,J)
	  GO TO 30
29	    BRKNEW(I) = (BREAK(J)+BREAK(J+1))/2.0D0
30	CONTINUE
	RETURN
C
C		IF G IS CONSTANT, BRKNEW IS UNIFORM .
90	STEP = (BREAK(L+1)-BREAK(1))/DFLOAT(LNEW)
	DO 93 I=2,LNEW
93	  BRKNEW(I) = BREAK(1) + DFLOAT(I-1)*STEP
	RETURN
	END
ppvalu.f        496939159   869   730   100755  1465      `
	DOUBLE PRECISION FUNCTION PPVALU (BREAK,COEF,L,K,X,JDERIV)
C
CALLS INTERV
CALCULATES VALUE AT X OF JDERIV-TH DERIVATIVE OF PP FCT FROM PP-REPR
C
C***** I N P U T *****
C  BREAK, COEF, L, K -- FORMS THE PP-REPRESENTATION OF THE FUNCTION F
C	TO BE EVALUATED. sPECIFICALLY, THE J-TH DERIVATIVE OF F IS
C	GIVEN BY
C
C    (D**J)F(X) = COEF(J+1,I) + H*(COEF(J+2,I) + H*(... (COEF(K-1,I) +
C		  H*COEF(K,I)/(K-J-1))/(K-J-2) ... )/2)/1
C
C	WITH H = X - BREAK(I), AND
C
C	I = MAX(1, MAX(J,BREAK(J) .LE. X, 1 .LE. J .LE. L) ) .
C
C  X -- THE POINT AT WHICH TO EVALUATE.
C  JDERIV -- INTEGER GIVING THE ORDER OF THE DERIVATIVE TO BE 
C	EVALUATED.  A S S U M E D  TO BE ZERO OR POSITIVE.
C
C***** O U T P U T *****
C  PPVALU -- THE VALUE OF THE (JDERIV)-TH DERIVATIVE OF F AT X .
C
C***** M E T H O D *****
C    THE INTERVAL INDEX I, APPROPRIATE FOR X, IS FOUND THROUGH A CALL
C  TO INTERV. THE FORMULA ABOVE FOR THE JDERIV-TH DERIVATIVE OF F
C  IS THEN EVALUATED (BY NESTED MULTIPICATION).
C
	INTEGER JDERIV,K,L, I,M,NDUMMY
	REAL*8 BREAK(L),COEF(K,L),X, FMMJDR,H
	PPVALU = 0.
	FMMJDR = K-JDERIV
C
C		DERIVATIVES OF ORDER K OR HIGHER ARE IDENTICALLY ZERO.
C
	IF (FMMJDR .LE. 0) GO TO 99
C
C		FIND INDEX I OF LARGEST BREAKPOINT TO THE LEFT OF X .
C
	CALL INTERV (BREAK,L,X,I,NDUMMY)
C
C	EVALUATE JDERIV-TH DERIVATIVE OF I-TH POLYNOMIAL PIECE AT X .
C
	H = X - BREAK(I)
	DO 10 M=K,JDERIV+1,-1
	  PPVALU = (PPVALU/FMMJDR)*H + COEF(M,I)
10	  FMMJDR = FMMJDR - 1.
C
99	RETURN
	END

setupq.f        496939161   869   730   100755  1409      `
C
	SUBROUTINE SETUPQ ( X, DX, Y, NPOINT, V, QTY )
C  TO BE CALLED IN  S M O O T H
C
C  PUT DELX = X(.+1) - X(.)   INTO  V(.,4),
C  PUT THE THREE BANDS OF  Q-TRANSP*D  INTO  V(.,1-3), AND
C  PUT THE THREE BANDS OF  (D*Q)-TRANSP*(D*Q)  AT AND ABOVE THE DIAGONAL
C     INTO  V(.,5-7) .
C     HERE,  Q-TRANSP  IS  THE TRIDIAGONAL MATRIX OF ORDER  (NPOINT-2,NPOINT)
C  WITH GENERAL ROW  1/DELX(I) , -1/DELX(I) - 1/DELX(I+1) , 1/DELX(I+1)
C  AND  D  IS THE DIAGONAL MATRIX  WITH GENERAL ROW  DX(I) .
	INTEGER NPOINT,   I,NPM1
	REAL*8 DX(NPOINT),QTY(NPOINT),V(NPOINT,7),X(NPOINT),Y(NPOINT),
     *                                                         DIFF,PREV
	NPM1 = NPOINT - 1
	V(1,4) = X(2) - X(1)
	DO 11 I=2,NPM1
	   V(I,4) = X(I+1) - X(I)
           V(I,1) = DX(I-1)/V(I-1,4)
	   V(I,2) = -DX(I)/V(I,4) - DX(I)/V(I-1,4)
11	   V(I,3) = DX(I+1)/V(I,4)
	V(NPOINT,1) = 0.
	DO 12 I=2,NPM1
12	   V(I,5) = V(I,1)**2 + V(I,2)**2 + V(I,3)**2
	IF(NPM1 .LT. 3)                    GO TO 14
	DO 13 I=3,NPM1
13         V(I-1,6) = V(I-1,2)*V(I,1) + V(I-1,3)*V(I,2)
14	V(NPM1,6) = 0.
	IF (NPM1 .LT. 4)                   GO TO 16
	DO 15 I=4,NPM1
15	   V(I-2,7) = V(I-2,3)*V(I,1)
16	V(NPM1-1,7) = 0.
	V(NPM1,7) = 0.
CONSTRUCT  Q-TRANSP. * Y  IN QTY.
	PREV = (Y(2) - Y(1))/V(1,4)
	DO 21 I=2,NPM1
	   DIFF = (Y(I+1)-Y(I))/V(I,4)
	   QTY(I) = DIFF - PREV
21	   PREV = DIFF
                                           RETURN
	END

smooth.f        496939162   869   730   100755  4589      `
	DOUBLE PRECISION FUNCTION SMOOTH ( X, Y, DY, NPOINT, S, V, A )
CALLS  SETUPQ, CHOLID
C
C  CONSTRUCTS THE CUBIC SMOOTHING SPLINE  F  TO GIVEN DATA  (X(I),Y(I)),
C  I=1,...,NPOINT, WHICH HAS AS SMALL A SECOND DERIVATIVE AS POSSIBLE
C  WHILE
C  S(F) = SUM( ((Y(I)-F(X(I)))/DY(I))**2 , I=1,...,NPOINT ) .LE. S .
C
C******  I N P U T  ******
C  X(1),...,X(NPOINT)   DATA ABSCISSAE,  A S S U M E D  TO BE STRICTLY
C        INCREASING .
C  Y(1),...,Y(NPOINT)     CORRESPONDING DATA ORDINATES .
C  DY(1),...,DY(NPOINT)     ESTIMATE OF UNCERTAINTY IN DATA,  A S S U M-
C        E D  TO BE POSITIVE .
C  NPOINT.....NUMBER OF DATA POINTS,  A S S U M E D  .GT. 1
C  S.....UPPER BOUND ON THE DISCRETE WEIGHTED MEAN SQUARE DISTANCE OF
C        THE APPROXIMATION  F  FROM THE DATA .
C
C******  W O R K  A R R A Y S  ******
C  V.....OF SIZE (NPOINT,7)
C  A.....OF SIZE (NPOINT,4)
C
C******  O U T P U T  ******
C  A(.,1).....CONTAINS THE SEQUENCE OF SMOOTHED ORDINATES .
C  A(I,J) = D**(J-1)F(X(I)), J=2,3,4, I=1,...,NPOINT-1 ,  I.E., THE
C        FIRST THREE DERIVATIVES OF THE SMOOTHING SPLINE  F  AT THE
C        LEFT END OF EACH OF THE DATA INTERVALS .
C
C     W A R N I N G . . .   A  WOULD HAVE TO BE TRANSPOSED BEFORE IT
C        COULD BE USED IN  PPVALU .
C
C******  M E T H O D  ******
C     THE MATRICES Q-TRANSP*D  AND  Q-TRANSP*D**2*Q  ARE CONSTRUCTED IN
C   S E T U P Q  FROM X  AND  DY , AS IS THE VECTOR  QTY = Q-TRANSP*Y .
C  THEN, FOR GIVEN  P , THE VECTOR  U  IS DETERMINED IN  C H O L I D AS
C  THE SOLUTION OF THE LINEAR SYSTEM
C	        (6(1-P)Q-TRANSP*D**2*Q + P*R)U  = QTY .
C  FROM  U , THE SMOOTHING SPLINE  F  (FOR THIS CHOICE OF SMOOTHING PAR-
C  AMETER  P ) IS OBTAINED IN THE SENSE THAT
C	                 F(X(.))  =  Y - 6(1-P)D**2*Q*U      AND
C                  (D**2)F(X(.))  =  6*P*U                    .
C     THE SMOOTHING PARAMETER  P  IS FOUND  (IF POSSIBLE) SO THAT
C                SF(P)  =  S ,
C  WITH  SF(P) = S(F) , WHERE  F  IS THE SMOOTHING SPLINE AS IT DEPENDS
C  ON  P .  IF  S = 0, THEN P = 1 . IF  SF(0)  .LE.  S , THEN P = 0 .
C  OTHERWISE, THE SECANT METHOD IS USED TO LOCATE APPROPRIATE  P  IN
C  THE OPEN INTERVAL  (0,1) . SPECIFICALLY,
C                P(0) = 0,  P(1) = (S - SF(0))/DSF
C  WITH  DSF = -24*U-TRANSP*R*U  TAKEN AS AN APPROXIMATION TO  D(SF(0))
C  = DSF + 60*(D*Q*U)-TRANSP*(D*Q*U) , AND  U  AS OBTAINED FOR  P = 0 .
C  AFTER THAT, FOR N=1,2,...  UNTIL SF(P(N)) .LE. 1.01*S, DO....
C     DETERMINE  P(N+1)  AS THE POINT AT WHICH THE SECANT TO  SF  AT THE
C     POINTS  P(N)  AND  P(N-1)  TAKES ON THE VALUE S .
C     IF P(N+1) .GE. 1 , CHOOSE INSTEAD  P(N+1)  AS THE POINT AT WHICH
C     THE PARABOLA  SF(P(N))*((1-.)/(1-P(N)))**2 TAKES ON THE VALUE  S.
C     NOTE THAT, IN EXACT ARITHMETIC, ALWAYS  P(N+1) .GT. P(N) , HENCE
C     SF(P(N+1)) .LT. SF(P(N)) . THEREFORE, ALSO STOP THE ITERATION,
C     WITH FINAL  P = 1 , IN CASE  SF(P(N+1)) .GE. SF(P(N)) .
C
	INTEGER NPOINT,   I,NPM1
	REAL*8 A(NPOINT,4),DY(NPOINT),S,V(NPOINT,7),X(NPOINT),Y(NPOINT)
     *         ,CHANGE,P,PREVSF,PREVP,SFP,SIXP,SIX1MP,UTRU
	CALL SETUPQ (X,DY,Y,NPOINT,V,A(1,4))
	IF (S .GT. 0.)                     GO TO 20
10	P = 1.
	CALL CHOLID (P,V,A(1,4),NPOINT,1,A(1,3),A(1,1))
	SFP = 0.
                                           GO TO 60
20	P = 0.
	CALL CHOLID (P,V,A(1,4),NPOINT,1,A(1,3),A(1,1))
	SFP = 0.
	DO 21 I=1,NPOINT
21	   SFP = SFP + (A(I,1)*DY(I))**2
	SFP = SFP*36.
	IF(SFP .LE. S)                     GO TO 60
	PREVP = 0.
	PREVSF = SFP
	UTRU = 0.
	DO 25 I=2,NPOINT
25	   UTRU = UTRU + V(I-1,4)*(A(I-1,3)*(A(I-1,3)+A(I,3))+A(I,3)**2)
	P = (SFP-S)/(24.*UTRU)
C  
C	SECANT ITERATION FOR THE DETERMINATION OF P STARTS HERE.
C
30	CALL CHOLID (P,V,A(1,4),NPOINT,1,A(1,3),A(1,1))
	SFP = 0.
	DO 35 I=1,NPOINT
35         SFP = SFP+ (A(I,1)*DY(I))**2
	SFP = SFP*36.*(1.-P)**2
	IF (SFP .LE. 1.01*S)               GO TO 60
	IF (SFP .GE. PREVSF)               GO TO 10
	CHANGE = (P-PREVP)/(SFP-PREVSF)*(SFP-S)
	PREVP = P
	P = P - CHANGE
	PREVSF = SFP
	IF (P .LT. 1)                      GO TO 30
	P = 1. - SQRT(S/PREVSF)*(1.-PREVP)
                                           GO TO 30
CORRECT VALUE OF  P  HAS BEEN FOUND.
COMPUTE POL.COEFFICIENTS FROM Q*U (IN A(.,1)).
C
60	SMOOTH = SFP
	SIX1MP = 6.*(1.-P)
	DO 61 I=1,NPOINT
61	   A(I,1) = Y(I) - SIX1MP*DY(I)**2*A(I,1)
	SIXP = 6.*P
	DO 62 I=1,NPOINT
62	   A(I,3) = A(I,3)*SIXP
	NPM1 = NPOINT - 1
	DO 63 I=1,NPM1
	   A(I,4) = (A(I+1,3)-A(I,3))/V(I,4)
63	   A(I,2) = (A(I+1,1)-A(I,1))/V(I,4)
     *                        - (A(I,3)+A(I,4)/3.*V(I,4))/2.*V(I,4)
                                           RETURN
	END

splint.f        496939163   869   730   100755  5142      `
      SUBROUTINE SPLINT ( TAU, GTAU, T, N, K, Q, BCOEF, IFLAG )
CALLS BSPLVB, BANFAC/SLV
C
C   SPLINT  PRODUCES THE B-SPLINE COEFF.S BCOEF  OF THE SPLINE OF ORDER
C   K  WITH KNOTS  T(I), I=1,..., N + K , WHICH TAKES ON THE VALUE
C   GTAU(I) AT  TAU(I), I=1,..., N .
C
C******  I N P U T  ******
C  TAU.....ARRAY OF LENGTH  N , CONTAINING DATA POINT ABSCISSAE.
C    A S S U M P T I O N . . .  TAU  IS STRICTLY INCREASING
C  GTAU.....CORRESPONDING ARRAY OF LENGTH  N , CONTAINING DATA POINT OR-
C        DINATES
C  T.....KNOT SEQUENCE, OF LENGTH  N+K
C  N.....NUMBER OF DATA POINTS AND DIMENSION OF SPLINE SPACE  S(K,T)
C  K.....ORDER OF SPLINE
C
C******  O U T P U T  ******
C  Q.....ARRAY OF SIZE  (2*K-1)*N , CONTAINING THE TRIANGULAR FACTORIZ-
C        ATION OF THE COEFFICIENT MATRIX OF THE LINEAR SYSTEM FOR THE B-
C        COEFFICIENTS OF THE SPLINE INTERPOLANT.
C           THE B-COEFFS FOR THE INTERPOLANT OF AN ADDITIONAL DATA SET
C        (TAU(I),HTAU(I)), I=1,...,N  WITH THE SAME DATA ABSCISSAE CAN
C        BE OBTAINED WITHOUT GOING THROUGH ALL THE CALCULATIONS IN THIS
C        ROUTINE, SIMPLY BY LOADING  HTAU  INTO  BCOEF  AND THEN EXECUT-
C        ING THE    CALL BANSLV ( Q, 2*K-1, N, K-1, K-1, BCOEF )
C  BCOEF.....THE B-COEFFICIENTS OF THE INTERPOLANT, OF LENGTH  N
C  IFLAG.....AN INTEGER INDICATING SUCCESS (= 1)  OR FAILURE (= 2)
C        THE LINEAR SYSTEM TO BE SOLVED IS (THEORETICALLY) INVERTIBLE IF
C        AND ONLY IF
C              T(I) .LT. TAU(I) .LT. T(I+K),    ALL I.
C        VIOLATION OF THIS CONDITION IS CERTAIN TO LEAD TO  IFLAG = 2 .
C
C******  M E T H O D  ******
C     THE I-TH EQUATION OF THE LINEAR SYSTEM  A*BCOEF = B  FOR THE B-CO-
C  EFFS OF THE INTERPOLANT ENFORCES INTERPOLATION AT  TAU(I), I=1,...,N.
C  HENCE,  B(I) = GTAU(I), ALL I, AND  A  IS A BAND MATRIX WITH  2K-1
C   BANDS (IF IT IS INVERTIBLE).
C     THE MATRIX  A  IS GENERATED ROW BY ROW AND STORED, DIAGONAL BY DI
C  AGONAL, IN THE  R O W S  OF THE ARRAY  Q , WITH THE MAIN DIAGONAL GO-
C  ING INTO ROW  K .  SEE COMMENTS IN THE PROGRAM BELOW.
C     THE BANDED SYSTEM IS THEN SOLVED BY A CALL TO  BANFAC (WHICH CON-
C  STRUCTS THE TRIANGULAR FACTORIZATION FOR  A  AND STORES IT AGAIN IN
C   Q ), FOLLOWED BY A CALL TO  BANSLV (WHICH THEN OBTAINS THE SOLUTION
C   BCOEF  BY SUBSTITUTION).
C     BANFAC  DOES NO PIVOTING, SINCE THE TOTAL POSITIVITY OF THE MATRIX
C  A  MAKES THIS UNNECESSARY.
C
      INTEGER IFLAG,K,N,   I,ILP1MX,J,JJ,KM1,KPKM2,LEFT,LENQ,NP1
      REAL*8 BCOEF(N),GTAU(N),Q(1),T(1),TAU(N),   TAUI
C     DIMENSION Q(2*K-1,N), T(N+K)
CURRENT FORTRAN STANDARD MAKES IT IMPOSSIBLE TO SPECIFY PRECISELY THE
C  DIMENSION OF  Q  AND  T  WITHOUT THE INTRODUCTION OF OTHERWISE SUPER-
C  FLUOUS ADDITIONAL ARGUMENTS.
      NP1 = N + 1
      KM1 = K - 1
      KPKM2 = 2*KM1
      LEFT = K
C                ZERO OUT ALL ENTRIES OF Q
      LENQ = N*(K+KM1)
      DO 5 I=1,LENQ
    5    Q(I) = 0.
C
C  ***   LOOP OVER I TO CONSTRUCT THE  N  INTERPOLATION EQUATIONS
      DO 30 I=1,N
         TAUI = TAU(I)
         ILP1MX = MIN0(I+K,NP1)
C        *** FIND  LEFT  IN THE CLOSED INTERVAL (I,I+K-1) SUCH THAT
C                T(LEFT).LE. TAU(I) .LT. T(LEFT+1)
C        MATRIX IS SINGULAR IF THIS IS NOT POSSIBLE
         LEFT = MAX0(LEFT,I)
         IF (TAUI .LT. T(LEFT))         GO TO 998
   15       IF (TAUI .LT. T(LEFT+1))     GO TO 16
            LEFT = LEFT + 1
            IF (LEFT .LT.ILP1MX)        GO TO 15
         LEFT = LEFT - 1
         IF (TAUI .GT. T(LEFT+1))       GO TO 998
C        *** THE I-TH EQUATION ENFORCES INTERPOLATION AT TAUI, HENCE
C        A(I,J) = B(J,K,T)(TAUI), ALL J. ONLY THE  K  ENTRIES WITH  J =
C        LEFT-K+1,...,LEFT ACTUALLY MIGHT BE NONZERO. THESE  K  NUMBERS
C        ARE RETURNED, IN  BCOEF (USED FOR TEMP.STORAGE HERE), BY THE
C        FOLLOWING
   16    CALL BSPLVB ( T, K, 1, TAUI, LEFT, BCOEF )
C        WE THEREFORE WANT  BCOEF(J) = B(LEFT-K+J)(TAUI) TO GO INTO
C        A(I,LEFT-K+J), I.E., INTO  Q(I-(LEFT+J)+2*K,(LEFT+J)-K) SINCE
C        A(I+J,J)  IS TO GO INTO  Q(I+K,J), ALL I,J,  IF WE CONSIDER  Q
C        AS A TWO-DIM. ARRAY , WITH  2*K-1  ROWS (SEE COMMENTS IN
C        BANFAC). IN THE PRESENT PROGRAM, WE TREAT  Q  AS AN EQUIVALENT
C        ONE-DIMENSIONAL ARRAY (BECAUSE OF FORTRAN RESTRICTIONS ON
C        DIMENSION STATEMENTS) . WE THEREFORE WANT  BCOEF(J) TO GO INTO
C        ENTRY
C            I - (LEFT+J) + 2*K + ((LEFT+J) - K-1)*(2*K-1)
C                    =  I-LEFT+1 + (LEFT -K)*(2*K-1) + (2*K-2)*J
C        OF  Q .
         JJ = I-LEFT+1 + (LEFT-K)*(K+KM1)
         DO 30 J=1,K
            JJ = JJ + KPKM2
   30       Q(JJ) = BCOEF(J)
C
C     ***OBTAIN FACTORIZATION OF  A  , STORED AGAIN IN  Q.
      CALL BANFAC ( Q, K+KM1, N, KM1, KM1, IFLAG )
                                        GO TO (40,999), IFLAG
C     *** SOLVE  A*BCOEF = GTAU  BY BACKSUBSTITUTION
   40 DO 41 I=1,N
   41    BCOEF(I) = GTAU(I)
      CALL BANSLV ( Q, K+KM1, N, KM1, KM1, BCOEF )
                                        RETURN
  998 IFLAG = 2
  999 PRINT 699
  699 FORMAT(41H LINEAR SYSTEM IN  SPLINT  NOT INVERTIBLE)
                                        RETURN
       END
