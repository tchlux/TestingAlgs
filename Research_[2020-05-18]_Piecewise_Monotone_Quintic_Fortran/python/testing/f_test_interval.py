
# ====================================================================
#                         Huge value cases.
# U0   =  0.0000000000000000     
# U1   =  1.1579208923731615E+031
# F0   =  0.0000000000000000     
# DF0  =  2.0000000000000000     
# DDF0 = -1.7272337110188896E-031
# F1   =  1.1579208923731615E+031
# DF1  =  0.0000000000000000     
# DDF1 =  0.0000000000000000     

# U0   =  1.1579208923731616E+029
# U1   =  2.3158417847463231E+029
# F0   =  1.1579208923731616E+029
# DF0  =  0.0000000000000000     
# DDF0 =  0.0000000000000000     
# F1   =  2.1997121092430088E+030
# DF1  =  0.0000000000000000     
# DDF1 = -2.2156933902283129E-029

U0   =    1.9221486813394475E+023
U1   =    1.9337278902631812E+023
F0   =    3.4295043674554457E+021
DF0  =   -7.3547132703516163E-002
DDF0 =   -4.7637407608192277E-023
F1   =    3.3049635425868652E+021
DF1  =   -0.14222222222201797     
DDF1 =   -4.1453609064447915E-023

# ====================================================================
#                        Tiny values cases.
# U0   =  0.0000000000000000     
# U1   =  1.4901161193847656E-008
# F0   =  0.0000000000000000     
# DF0  =  0.0000000000000000     
# DDF0 =  0.0000000000000000     
# F1   =  1.0000000000000000     
# DF1  =  637436381.66763830     
# DDF1 =  76548063637230272.     

# ====================================================================
#                        Normal value cases.

# Use Python to construct an exact quintic piece that matches this data.
from polynomial import Spline, Polynomial
from fraction import Fraction
def exact(l):
    try: return [exact(v) for v in l]
    except TypeError: pass
    return Fraction(l)
x = [U0, U1]
fx = [[F0, DF0, DDF0], [F1, DF1, DDF1]]
f = Spline(exact(x), exact(fx))
df = f.derivative()
print(Polynomial(f._functions[0]))

# Use Fortran to construct a quintic piece thata matches this data.

import numpy as np
import fmodpy
spline = fmodpy.fimport("SPLINE.f90")
# Define an object that has all of the expected functions.
class splines:
    fit_spline = spline.fit_spline
    eval_spline = spline.eval_spline

nb, ncc = 2, 3
sk = np.ones(nb*ncc + 2*ncc)
sc = np.ones(nb*ncc)
x = np.asarray(x, dtype=float, order='f')
fx = np.asarray(fx, dtype=float, order='f')
shift = np.min(fx[:,0])
fx[:,0] -= shift
sk, sc, info = splines.fit_spline(x, fx, sk, sc)
sc += shift
print('info:', info)
print('sk:', sk)
print('sc:', sc)
# MAXPT =     1.2116159427162417E+031
# MINPT =     2.8397248657411912E+030
# print("max df:", float(df(MAXPT)))
# print("min df:", float(df(MINPT)))

from util.plot import Plot
p = Plot()
x = np.linspace(U0,U1,1000)

print(max(abs(np.array(df(x.copy()),dtype=float) -
              splines.eval_spline(sk,sc,x.copy(),d=1)[0])))
# exit()

p.add("Exact f", x, f(x.copy()), mode='lines', group=0)
p.add("Exact df", x, df(x.copy()), mode='lines', group=1)
p.add("Exact ddf", x, df.derivative()(x.copy()), mode='lines', group=2)

p.add("F f", x, splines.eval_spline(sk,sc,x.copy(),d=0)[0], mode='lines', color=0, dash='dash', group=0)
p.add("F df", x, splines.eval_spline(sk,sc,x.copy(),d=1)[0], mode='lines', color=1, dash='dash', group=1)
p.add("F ddf", x, splines.eval_spline(sk,sc,x.copy(),d=2)[0], mode='lines', color=2, dash='dash', group=2)
p.show()
exit()



F_PTS = np.array([0.0000000000000000, 1.8931499104941276E+029, 3.7862998209882553E+029, 5.6794497314823826E+029, 7.5725996419765105E+029, 9.4657495524706378E+029, 1.1358899462964765E+030, 1.3252049373458891E+030, 1.5145199283953021E+030, 1.7038349194447148E+030, 1.8931499104941276E+030, 2.0824649015435400E+030, 2.2717798925929530E+030, 2.4610948836423660E+030, 2.6504098746917782E+030, 2.8397248657411912E+030, 3.0290398567906042E+030, 3.2183548478400167E+030, 3.4076698388894297E+030, 3.5969848299388421E+030, 3.7862998209882551E+030, 3.9756148120376676E+030, 4.1649298030870800E+030, 4.3542447941364930E+030, 4.5435597851859060E+030, 4.7328747762353191E+030, 4.9221897672847321E+030, 5.1115047583341434E+030, 5.3008197493835564E+030, 5.4901347404329694E+030, 5.6794497314823824E+030, 5.8687647225317954E+030, 6.0580797135812084E+030, 6.2473947046306203E+030, 6.4367096956800333E+030, 6.6260246867294463E+030, 6.8153396777788593E+030, 7.0046546688282724E+030, 7.1939696598776842E+030, 7.3832846509270972E+030, 7.5725996419765103E+030, 7.7619146330259233E+030, 7.9512296240753352E+030, 8.1405446151247482E+030, 8.3298596061741600E+030, 8.5191745972235731E+030, 8.7084895882729861E+030, 8.8978045793223991E+030, 9.0871195703718121E+030, 9.2764345614212251E+030, 9.4657495524706381E+030, 9.6550645435200500E+030, 9.8443795345694641E+030, 1.0033694525618876E+031, 1.0223009516668287E+031, 1.0412324507717701E+031, 1.0601639498767113E+031, 1.0790954489816527E+031, 1.0980269480865939E+031, 1.1169584471915351E+031, 1.1358899462964765E+031, 1.1548214454014177E+031, 1.1737529445063591E+031, 1.1926844436113003E+031, 1.2116159427162417E+031, 1.2305474418211829E+031, 1.2494789409261241E+031, 1.2684104400310655E+031, 1.2873419391360067E+031, 1.3062734382409481E+031, 1.3252049373458893E+031, 1.3441364364508305E+031, 1.3630679355557719E+031, 1.3819994346607131E+031, 1.4009309337656545E+031, 1.4198624328705957E+031, 1.4387939319755368E+031, 1.4577254310804783E+031, 1.4766569301854194E+031, 1.4955884292903609E+031, 1.5145199283953021E+031, 1.5334514275002435E+031, 1.5523829266051847E+031, 1.5713144257101258E+031, 1.5902459248150670E+031, 1.6091774239200082E+031, 1.6281089230249496E+031, 1.6470404221298908E+031, 1.6659719212348320E+031, 1.6849034203397734E+031, 1.7038349194447146E+031, 1.7227664185496560E+031, 1.7416979176545972E+031, 1.7606294167595386E+031, 1.7795609158644798E+031, 1.7984924149694210E+031, 1.8174239140743624E+031, 1.8363554131793036E+031, 1.8552869122842450E+031, 1.8742184113891862E+031])
F_VALS = np.array([1.9999999999999996,       -594370.88624304836,       -1134436.2015501545,       -1622421.9160386953,       -2060517.5202023138,       -2450874.0249109231,       -2795603.9614106994,       -3096781.3813240891,       -3356441.8566498086,       -3576582.4797628322,       -3759161.8634144138,       -3906100.1407320648,       -4019278.9652195703,       -4100541.5107569806,       -4151692.4716006108,       -4174498.0623830464,       -4170686.0181131405,       -4141945.5941760116,       -4089927.5663330462,       -4016244.2307219021,       -3922469.4038564954,       -3810138.4226270197,       -3680748.1442999295,       -3535756.9465179425,       -3376584.7273000609,       -3204612.9050415321,       -3021184.4185138927,       -2827603.7268649302,       -2625136.8096187022,       -2415011.1666755383,       -2198415.8183120349,       -1976501.3051810546,       -1750379.6883117291,       -1521124.5491094501,       -1289770.9893558875,       -1057315.6312089700,       -824716.61720289895,       -592893.61024813750,       -362727.79363142559,       -135061.87101575895,        89299.933559592289,        309591.87567908928,        525086.69055093150,        735095.59300704743,        938968.27750309650,        1136092.9181184790,        1325896.1685563189,        1507843.1621434728,        1681437.5118305380,        1846221.3101918362,        2001775.1294254279,        2147718.0213530986,        2283707.5174203776,        2409439.6286965166,        2524648.8458745033,        2629108.1392710609,        2722628.9588266457,        2805061.2341054366,        2876293.3742953562,        2936252.2682080586,        2984903.2842789232,        3022250.2705670698,        3048335.5547553464,        3063239.9441503333,        3067082.7256823499,        3060021.6659054407,        3042253.0109973857,        3014011.4867596971,        2975570.2986176223,        2927241.1316201352,        2869374.1504399506,        2802357.9993735095,        2726619.8023409867,        2642625.1628862936,        2550878.1641770685,        2451921.3690046878,        2346335.8197842552,        2234741.0385546112,        2117795.0269783284,        1996194.2663417074,        1870673.7175547904,        1742006.8211513413,        1611005.4972888683,        1478520.1457486020,        1345439.6459355117,        1212691.3568782969,        1081241.1172293890,        952093.24526495626,        826290.53888489516,        704914.27561283519,        589084.21259614301,        479958.58660591103,        378734.11403697106,        286645.99090788187,        204967.89286093949,        135011.97516216928,        78128.872701329921,        35707.699991914611,        9176.0511711468043,       -1.5726356217271587E-008])

py_vals = np.array(df(F_PTS), dtype=float)

print(abs(F_VALS - py_vals) / abs(1.0 + py_vals))


# sk: [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
#      0.00000000e+00 0.00000000e+00 2.98023224e-08 2.98023224e-08
#      2.98023224e-08 2.98023224e-08 2.98023224e-08 2.98023224e-08]
# sc: [ 0.00000000e+00 -1.89478063e-15 -3.78956126e-15 -1.55965015e+01
#       4.79906706e+01 -5.19883382e+01]
