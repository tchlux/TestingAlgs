    def print_abg():
        DDX0 = ratio * original_DDX0 + (1-ratio) * target_DDX0
        DDX1 = ratio * original_DDX1 + (1-ratio) * target_DDX1
        a = alpha_constant + alpha_multiplier * DDX1
        g = gamma_constant + gamma_multiplier * DDX0
        b = beta_constant  + beta_multiplier  * (DDX0 - DDX1)
        print()
        print(f"ratio = {ratio}")
        print(f"DDX0 = {DDX0}")
        print(f"DDX1 = {DDX1}")
        print(f" alpha = {a}")
        print(f" gamma = {g}")
        print(f" beta  = {b}")
        if b <= 6:
            bound = - (b + 2) / 2
            print("  SMALL, b <= 6")
        else:
            bound = -2 * (b - 2)**(1/2)
            print("  BIG,   b > 6")
        print(f"  bound = {bound}")
        print(f"  alpha > bound  ->  {a > bound}")
        print(f"  gamma > bound  ->  {g > bound}")
        print()


    # Scale the derivative vector to make tau_1 positive.
    tau_1 = 24 + 2*(A*B)**(1/2) - 3*(A+B)
    if (tau_1 <= 0):
        # Compute the rescale factor necessary to make tau_1 0.
        rescale = 24 * (3*(A+B) + 2*(A*B)**(1/2)) / (9*(A**2+B**2) + 14*(A*B))
        rescale -= 2**(-26) * rescale
        # Rescale the derivatives
        DX0 *= rescale
        DX1 *= rescale
        # Recompute A and B.
        A = DX0 / interval_slope
        B = DX1 / interval_slope
        # Record the change.
        changed = True


        print("-" * 70)
        print()
        print("DDX0:  ",float(original_DDX0))
        print("DDX1:  ",float(original_DDX1))
        print()
        print("DDX TARGET")

        DDX0 = target_DDX0
        DDX1 = target_DDX1
        ratio = 0
        print_abg()

        from math import sqrt
        # CASE 1:  (alpha == bound) and (beta <= 6)
        try:
            print("CASE 1   (alpha == bound) and  (beta <= 6)")
            ratio = (3*B**0.25*DX0*(U0 - U1)**2*(7*DX0*(U0 - U1) + 7*DX1*(U0 - U1) + 4*(original_DDX0 - original_DDX1)*(X0 - X1)) + 2*sqrt(A)*B**0.75*DX0*(9*U0**2 - 18*U0*U1 + 9*U1**2 + 8*X0 - 8*X1)*(X0 - X1) - 12*A**1.75*sqrt(B)*(U0 - U1)*(X0 - X1)**2 - 4*A**1.25*(U0 - U1)*(X0 - X1)*(7*DX1*(U0 - U1) + 4*original_DDX1*(-X0 + X1)))/(3*B**0.25*DX0*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*X0 - 32*X1) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*X0 - 32*X1) - 80*(X0 - X1)**2) + 18*sqrt(A)*B**0.75*DX0*(U0 - U1)**2*(X0 - X1) - 4*A**1.25*DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*(X0 - X1))*(X0 - X1) - 12*A**1.75*sqrt(B)*(U0 - U1)*(X0 - X1)**2)
            print_abg()
        except:
            print()
            print("Failed..")
            print()
        # CASE 2:  (gamma == bound) and (beta <= 6)
        try:
            print("CASE 2   (gamma == bound) and  (beta <= 6)")
            ratio = (21*DX0**2*(U0 - U1)**3 + 21*DX0*DX1*(U0 - U1)**3 + 2*DX0*(-14*A**0.75*B**0.25*(U0 - U1)**2 + 6*(original_DDX0 - original_DDX1)*(U0 - U1)**2 + sqrt(A)*sqrt(B)*(9*U0**2 - 18*U0*U1 + 9*U1**2 + 8*X0 - 8*X1))*(X0 - X1) - 4*A**0.75*B**0.25*(3*sqrt(A)*sqrt(B) + 4*original_DDX0)*(U0 - U1)*(X0 - X1)**2)/(3*DX0**2*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 3*DX0*DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) - 2*DX0*(-9*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 2*A**0.75*B**0.25*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 120*(X0 - X1))*(X0 - X1) - 12*A**1.25*B**0.75*(U0 - U1)*(X0 - X1)**2)
            print_abg()
        except:
            print()
            print("Failed..")
            print()
        # CASE 3:  (alpha == bound) and (beta > 6)
        try:
            print("CASE 3a  (alpha == bound) and (beta > 6)")
            ratio = (B**1.5*DX0**2*(X0 - X1)**2*((A**1.5*(U0 - U1)*(7*DX1*(U0 - U1) + (3*sqrt(A)*sqrt(B) - 4*original_DDX1)*(X0 - X1))*(DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1)))/(B**1.5*DX0**2*(X0 - X1)**2) - (12*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1))))/(sqrt(A)*sqrt(B)*(X0 - X1)**2) - 2*sqrt(2)*sqrt((3*(U0 - U1)**2*(7*DX0*(U0 - U1) + 7*DX1*(U0 - U1) + 2*(3*sqrt(A)*sqrt(B) + 2*original_DDX0 - 2*original_DDX1)*(X0 - X1))*(A*DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*A**1.5*sqrt(B)*(U0 - U1)*(X0 - X1))**2 - 16*A**2.5*sqrt(B)*(DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2*(X0 - X1)**2 - 3*A**2*(U0 - U1)*(7*DX1*(U0 - U1) + (3*sqrt(A)*sqrt(B) - 4*original_DDX1)*(X0 - X1))*(DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1))) + 18*B*DX0**2*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1)))**2)/(A*B**2*DX0**2*(X0 - X1)**4))))/(A**1.5*(DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2)
            print_abg()
        except:
            print()
            print("Failed..")
            print()
        try:
            print("CASE 3b")
            ratio = (B**1.5*DX0**2*(X0 - X1)**2*((A**1.5*(U0 - U1)*(7*DX1*(U0 - U1) + (3*sqrt(A)*sqrt(B) - 4*original_DDX1)*(X0 - X1))*(DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1)))/(B**1.5*DX0**2*(X0 - X1)**2) - (12*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1))))/(sqrt(A)*sqrt(B)*(X0 - X1)**2) + 2*sqrt(2)*sqrt((3*(U0 - U1)**2*(7*DX0*(U0 - U1) + 7*DX1*(U0 - U1) + 2*(3*sqrt(A)*sqrt(B) + 2*original_DDX0 - 2*original_DDX1)*(X0 - X1))*(A*DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*A**1.5*sqrt(B)*(U0 - U1)*(X0 - X1))**2 - 16*A**2.5*sqrt(B)*(DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2*(X0 - X1)**2 - 3*A**2*(U0 - U1)*(7*DX1*(U0 - U1) + (3*sqrt(A)*sqrt(B) - 4*original_DDX1)*(X0 - X1))*(DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1))) + 18*B*DX0**2*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1)))**2)/(A*B**2*DX0**2*(X0 - X1)**4))))/(A**1.5*(DX1*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2)
            print_abg()
        except:
            print()
            print("Failed..")
            print()
        # CASE 4:  (gamma == bound) and (beta > 6)
        try:
            print("CASE 4a  (gamma == bound) and (beta > 6)")
            ratio = (sqrt(B)*DX0**2*(X0 - X1)**2*((sqrt(A)*(U0 - U1)*(7*DX0*(U0 - U1) + (3*sqrt(A)*sqrt(B) + 4*original_DDX0)*(X0 - X1))*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1)))/(sqrt(B)*DX0**2*(X0 - X1)**2) - (12*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1))))/(sqrt(A)*sqrt(B)*(X0 - X1)**2) - 2*sqrt(2)*sqrt((3*A*(U0 - U1)**2*(7*DX0*(U0 - U1) + 7*DX1*(U0 - U1) + 2*(3*sqrt(A)*sqrt(B) + 2*original_DDX0 - 2*original_DDX1)*(X0 - X1))*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2 - 16*A**1.5*sqrt(B)*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2*(X0 - X1)**2 - 3*A*(U0 - U1)*(7*DX0*(U0 - U1) + (3*sqrt(A)*sqrt(B) + 4*original_DDX0)*(X0 - X1))*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1))) + 18*DX0**2*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1)))**2)/(A*B*DX0**2*(X0 - X1)**4))))/(sqrt(A)*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2)
            print_abg()
        except:
            print()
            print("Failed..")
            print()
        try:
            print("CASE 4b  (gamma == bound) and (beta > 6)")
            ratio = (sqrt(B)*DX0**2*(X0 - X1)**2*((sqrt(A)*(U0 - U1)*(7*DX0*(U0 - U1) + (3*sqrt(A)*sqrt(B) + 4*original_DDX0)*(X0 - X1))*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1)))/(sqrt(B)*DX0**2*(X0 - X1)**2) - (12*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1))))/(sqrt(A)*sqrt(B)*(X0 - X1)**2) + 2*sqrt(2)*sqrt((3*A*(U0 - U1)**2*(7*DX0*(U0 - U1) + 7*DX1*(U0 - U1) + 2*(3*sqrt(A)*sqrt(B) + 2*original_DDX0 - 2*original_DDX1)*(X0 - X1))*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2 - 16*A**1.5*sqrt(B)*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2*(X0 - X1)**2 - 3*A*(U0 - U1)*(7*DX0*(U0 - U1) + (3*sqrt(A)*sqrt(B) + 4*original_DDX0)*(X0 - X1))*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1))) + 18*DX0**2*(DX0*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + DX1*(U0 - U1)*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 32*(X0 - X1)) + 2*(X0 - X1)*(3*sqrt(A)*sqrt(B)*(U0 - U1)**2 + 40*(-X0 + X1)))**2)/(A*B*DX0**2*(X0 - X1)**4))))/(sqrt(A)*(DX0*(7*U0**2 - 14*U0*U1 + 7*U1**2 + 16*X0 - 16*X1) + 3*sqrt(A)*sqrt(B)*(U0 - U1)*(X0 - X1))**2)
            print_abg()
        except:
            print()
            print("Failed..")
            print()

        print()


    # Set A = max(0, A) and B = max(0, B).
    if (A < 0): DX0 = A = 0
    if (B < 0): DX1 = B = 0

    # # Scale the derivative vector to make tau_1 positive.
    # tau_1 = 24 + 2*(A*B)**(1/2) - 3*(A+B)
    # if (tau_1 <= 0):
    #     # Compute the rescale factor necessary to make tau_1 0.
    #     rescale = 24 * (3*(A+B) + 2*(A*B)**(1/2)) / (9*(A**2+B**2) + 14*(A*B))
    #     # Rescale the derivatives
    #     DX0 *= rescale
    #     DX1 *= rescale
    #     # Recompute A and B.
    #     A = DX0 / interval_slope
    #     B = DX1 / interval_slope
    #     # Record the change.
    #     changed = True
    from util.system import Timer
    a = Timer()
    f = monotone_quintic_spline(x,y, fix_previous=False)
    print("Time:",a(),"seconds")
    exit()





